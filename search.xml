<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>剑指Offer-题5-替换空格</title>
      <link href="/2018/03/27/%E5%89%91%E6%8C%87Offer-%E9%A2%985-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>/2018/03/27/%E5%89%91%E6%8C%87Offer-%E9%A2%985-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h1 id="题目：替换空格"><a href="#题目：替换空格" class="headerlink" title="题目：替换空格"></a>题目：替换空格</h1><h2 id="题目一：替换空格"><a href="#题目一：替换空格" class="headerlink" title="题目一：替换空格"></a>题目一：替换空格</h2><p>请实现一个函数，把原字符串中的每个空格替换成“%20”，例如输入“We are happy”,则输出“We%20are%20happy”。</p><h2 id="题目二：合并排序数组"><a href="#题目二：合并排序数组" class="headerlink" title="题目二：合并排序数组"></a>题目二：合并排序数组</h2><p>有两个排序的数组A1和A2，内存在A1的末尾有足够多的空余空间容纳A2。请实现一个函数，把A2中的所有数字插入A1中，并且所有的数字是排序的。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="解析题目一"><a href="#解析题目一" class="headerlink" title="解析题目一"></a>解析题目一</h2><p>本题考查字符串替换，且在原字符串上改动。若考虑<strong>从头至尾遍历字符串进行字符后移，则产生多次字段移动，时间复杂度为O(n^2)。</strong><br>考虑从尾至头遍历字符串进行字符后移？经书中点拨，此法甚妙😂！<strong>从尾至头仅产生一次字段移动，虽<em>须预先测量移动距离</em>，但仅遍历2n次，时间复杂度为O(n)。</strong><br>以下为本人代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> length, <span class="keyword">char</span> *aimStr, <span class="keyword">char</span> *replaceStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == str || length &lt;= <span class="number">0</span> || <span class="literal">nullptr</span> == aimStr || <span class="literal">nullptr</span> == replaceStr)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> strLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> replaceCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'\0'</span> != str[strLength++])</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>  == <span class="built_in">strncmp</span>(&amp;str[index], aimStr, <span class="built_in">strlen</span>(aimStr)))</span><br><span class="line">            ++replaceCount;</span><br><span class="line">    <span class="keyword">int</span> strNewLength = strLength + replaceCount * (<span class="built_in">strlen</span>(replaceStr) - <span class="built_in">strlen</span>(aimStr));</span><br><span class="line">    <span class="keyword">if</span> (strNewLength &gt; length)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> index = strLength;</span><br><span class="line">    <span class="keyword">int</span> indexNew = strNewLength;</span><br><span class="line">    <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; indexNew &gt; index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(&amp;str[index], aimStr, <span class="built_in">strlen</span>(aimStr)))</span><br><span class="line">        &#123;</span><br><span class="line">            indexNew -= <span class="built_in">strlen</span>(replaceStr) - <span class="built_in">strlen</span>(aimStr);</span><br><span class="line">            <span class="comment">// strcpy将自动在尾部附加结束符\0，故采用memcpy</span></span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;str[indexNew], replaceStr, <span class="built_in">strlen</span>(replaceStr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            str[indexNew] = str[index];</span><br><span class="line">        --index;</span><br><span class="line">        --indexNew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析题目二"><a href="#解析题目二" class="headerlink" title="解析题目二"></a>解析题目二</h2><p>思路与上题相同，附上本人代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> *aimArr, <span class="keyword">int</span> aimArrLength, <span class="keyword">int</span> length, <span class="keyword">int</span> *insertArr, <span class="keyword">int</span> insertArrLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == aimArr || aimArrLength &lt;= <span class="number">0</span> || length &lt;= <span class="number">0</span> || <span class="literal">nullptr</span> == insertArr || insertArrLength &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> newLength = aimArrLength + insertArrLength;</span><br><span class="line">    <span class="keyword">if</span> (newLength &gt; length)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> indexAim = aimArrLength - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> indexInsert = insertArrLength - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> indexNew = newLength - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (indexNew &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (aimArr[indexAim] &gt; insertArr[indexInsert])</span><br><span class="line">            aimArr[indexNew--] = aimArr[indexAim--];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            aimArr[indexNew--] = insertArr[indexInsert--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，<strong>在合并数组（包括字符串）时，应该优先考虑从后往前复制。</strong></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组 </tag>
            
            <tag> 替换 </tag>
            
            <tag> 空格 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题4-二维数组中的查找</title>
      <link href="/2018/03/26/%E5%89%91%E6%8C%87Offer-%E9%A2%984-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/03/26/%E5%89%91%E6%8C%87Offer-%E9%A2%984-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h1 id="题目：二维数组中的查找"><a href="#题目：二维数组中的查找" class="headerlink" title="题目：二维数组中的查找"></a>题目：二维数组中的查找</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>可以肯定的是直接遍历不可取🙄。之后想到跳步判断，先走斜线，若此时数值大于查找数则往左或往右倒退？往左之后该往上还是往下？继而联想到A*路径查找算法……<br>naive ! 书中指出<strong>考虑每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</strong>。问题变得困难是因为考虑数组中中间位置的数，此时该位置含有两个排序规律；不如考虑特殊位置-顶角的数呢？<br>二维数组有四个顶角，选择其中某个顶角分析。举例分析：<br>有如下二维数组，查找数字 <code>7</code><br>$$<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 8 &amp; 9 \\<br>    2 &amp; 4 &amp; 9 &amp; 12 \\<br>    4 &amp; 7 &amp; 10 &amp; 13 \\<br>    6 &amp; 8 &amp; 11 &amp; 15 \\<br>\end{bmatrix}<br>$$<br>对四个顶点分情况讨论(↓、→、↘表示增大方向)：</p><ul><li>考虑左上角则有规律：对于左上角有三个出度<br>$$<br>\begin{bmatrix}<br>  ● &amp; \rightarrow &amp; \rightarrow &amp; \rightarrow \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \rightarrow &amp; \searrow \\<br>\end{bmatrix}<br>$$</li><li>考虑右下角则有规律：对于右下角有三个入度<br>$$<br>\begin{bmatrix}<br>  ＋ &amp; \rightarrow &amp; \rightarrow &amp; \rightarrow \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \rightarrow &amp; ● \\<br>\end{bmatrix}<br>$$</li><li>考虑右上角则有规律：<strong>对于右上角有一个入度和一个出度</strong><br>$$<br>\begin{bmatrix}<br>  ＋ &amp; \rightarrow &amp; \rightarrow &amp; ● \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \rightarrow &amp; \searrow \\<br>\end{bmatrix}<br>$$</li><li>考虑左下角则有规律：<strong>对于左下角有一个入度和一个出度</strong><br>$$<br>\begin{bmatrix}<br>  ＋ &amp; \rightarrow &amp; \rightarrow &amp; \rightarrow \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  ● &amp; \rightarrow &amp; \rightarrow &amp; \searrow \\<br>\end{bmatrix}<br>$$</li></ul><p>“柿子要捡软的捏”，当然选一出一入的突破口啊！例如选择右上角数字 <code>9</code>，则 <code>9 &gt; 7</code> 说明第四列均大于 <code>7</code>，故判断数组范围缩小为<br>$$<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 8 \\<br>    2 &amp; 4 &amp; 9 \\<br>    4 &amp; 7 &amp; 10 \\<br>    6 &amp; 8 &amp; 11 \\<br>\end{bmatrix}<br>$$<br>继续选择右上角数字 <code>8</code>，则 <code>8 &gt; 7</code> 说明第四列均大于 <code>8</code>，故判断数组范围又缩小<br>$$<br>\begin{bmatrix}<br>    1 &amp; 2 \\<br>    2 &amp; 4 \\<br>    4 &amp; 7 \\<br>    6 &amp; 8 \\<br>\end{bmatrix}<br>$$<br>继续选择右上角数字 <code>2</code>，则 <code>2 &lt; 7</code> 说明第一行均小于 <code>8</code>，故判断数组范围双缩小<br>$$<br>\begin{bmatrix}<br>    2 &amp; 4 \\<br>    4 &amp; 7 \\<br>    6 &amp; 8 \\<br>\end{bmatrix}<br>$$<br>继续选择右上角数字 <code>4</code>，则 <code>4 &lt; 7</code> 说明第一行均小于 <code>8</code>，故判断数组范围叒缩小<br>$$<br>\begin{bmatrix}<br>    4 &amp; 7 \\<br>    6 &amp; 8 \\<br>\end{bmatrix}<br>$$<br>选择右上角数字 <code>7</code>，则寻找完毕😄。转化为代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNumber</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns, <span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == arr || rows &lt; <span class="number">1</span> || columns &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> column = columns;</span><br><span class="line">    <span class="keyword">while</span> (row &lt;= rows &amp;&amp; column &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (arr + ((row - <span class="number">1</span>) + (column - <span class="number">1</span>) * rows) &gt; number)</span><br><span class="line">            --column;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr + ((row - <span class="number">1</span>) + (column - <span class="number">1</span>) * rows) &lt; number)</span><br><span class="line">            ++row;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 二维 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题3-数组中重复的数字</title>
      <link href="/2018/03/25/%E5%89%91%E6%8C%87Offer-%E9%A2%983-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2018/03/25/%E5%89%91%E6%8C%87Offer-%E9%A2%983-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目：数组中重复的数字"><a href="#题目：数组中重复的数字" class="headerlink" title="题目：数组中重复的数字"></a>题目：数组中重复的数字</h1><h2 id="题目一：找出数组中重复的数字"><a href="#题目一：找出数组中重复的数字" class="headerlink" title="题目一：找出数组中重复的数字"></a>题目一：找出数组中重复的数字</h2><p>在一个长度为n的数组里的所有数字都在0~n-1的范围内。数组中某些数字是重复的。但不知道有几个数字重复了，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p><h2 id="题目二：不修改数组找出数组中重复的数字"><a href="#题目二：不修改数组找出数组中重复的数字" class="headerlink" title="题目二：不修改数组找出数组中重复的数字"></a>题目二：不修改数组找出数组中重复的数字</h2><p>在一个长度为n+1的数组里的所有数字都在1~n的范围内。所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7}，那么对应的输出是重复的数字2或者3。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="解析题目一"><a href="#解析题目一" class="headerlink" title="解析题目一"></a>解析题目一</h2><p>数组在空间上连续且含有下标，此题考虑查找效率<br>稍加思索，决定利用下标：若数值与下标不同则与数值对应下标的数值进行置换，若置换中发现两数相同则查找结束，如此时间复杂度仅O(n)，代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i != arr[i])</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != arr[arr[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[arr[i]];</span><br><span class="line">                arr[arr[i]] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = arr[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对照书本发现思路相同，nice !😎<br>原来无意中已利用下标充当Hash Table(哈希表)的思想解决了问题<br>不过本人漏掉重要的<strong>空值检测、边界检测</strong>😭，修复代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= length || arr[i] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i != arr[i])</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != arr[arr[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[arr[i]];</span><br><span class="line">                arr[arr[i]] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = arr[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原本以为完美无瑕，<strong>测试数组{0,2,0}发现无法找出重复数字</strong>。<br>究其原因<strong>对于替换数值后的数组{0,0,2}未再次判断，导致第二位 <code>0</code> 成为漏网之鱼</strong>，下为书中神级代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt;= length || numbers[i] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="comment">// 使用while便无“漏网之0”</span></span><br><span class="line">        <span class="keyword">while</span> (i != numbers[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] != numbers[numbers[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = numbers[numbers[i]];</span><br><span class="line">                numbers[numbers[i]] = numbers[i];</span><br><span class="line">                numbers[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = numbers[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析题目二"><a href="#解析题目二" class="headerlink" title="解析题目二"></a>解析题目二</h2><p>禁止修改输入数组？呵！断我财路，emmmm。苦思冥想，仅想到拷贝数组套用题目一方法……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == arr || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= length || arr[i] &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> *arrTemp = <span class="keyword">new</span> <span class="keyword">int</span>[length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; ++i)</span><br><span class="line">        arrTemp[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrTemp[arr[i] - <span class="number">1</span>] == arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            *duplication = arr[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arrTemp[arr[i] - <span class="number">1</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> arrTemp;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一筹莫展之下，阅读书中解析顿觉豁然开朗！书中指出，<strong>含重复数字范围内数字个数必大于该范围长度</strong>。例如</p><ul><li>对于长度为3的数组{1,2,2}，范围[1,1]内的数字个数为1等于范围长度1，而范围[2,2]内的数字个数为2大于范围长度1，可以确定重复数字位于范围[2,2]中即为2。</li><li>对于长度为5的数组{2,2,3,4,4}，范围[1,2]内的数字个数为2等于范围长度2，而范围[3,4]内的数字个数为3大于范围长度2，可以确定重复数字位于范围[3,4]中。继续分析范围[3,3]内的数字个数为1等于范围长度1，而范围[4,4]内的数字个数为2大于范围长度1，可以确定重复数字位于范围[4,4]中即为4。<strong>(此方法对于多个重复数字仅能找到其中之一)</strong></li></ul><p>以上两例说明只需对计数范围不断二分法，必定能找出重复数字。因此写出书中神级代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == numbers)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt;= start &amp;&amp; numbers[i] &lt;= end)</span><br><span class="line">            ++count;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == numbers || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt;= length || numbers[i] &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (end &gt;= start)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = ((end - start) &lt;&lt; <span class="number">1</span>) + start;</span><br><span class="line">        <span class="keyword">int</span> count = countRange(numbers, length, start, middle);</span><br><span class="line">        <span class="keyword">if</span> (end == start)</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = start;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; (middle - start + <span class="number">1</span>))</span><br><span class="line">            end = middle;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            start = middle + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于此二分查找法，countRange将被调用O(logn)次，而countRange的时间复杂度为O(n)，故总时间复杂度为O(nlogn)。空间复杂度为O(1)，这是利用时间换空间。</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组 </tag>
            
            <tag> 重复 </tag>
            
            <tag> 数字 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题2-实现单例模式</title>
      <link href="/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%982-%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%982-%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="题目：实现单例-Singleton-模式"><a href="#题目：实现单例-Singleton-模式" class="headerlink" title="题目：实现单例(Singleton)模式"></a>题目：实现单例(Singleton)模式</h1><p>设计一个类，我们只能生成该类的一个实例</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目要求明显，设计单例模式：仅生成单个实例<br>如此需要考虑一下几点：</p><ul><li>构造函数需“隐藏”，且另设方法通过静态变量判断是否创建实例充当构造函数</li><li>返回实例的方法必定使用 <code>new</code> 创建实例(否则将产生值传递生成多个单例)，故需存储静态实例指针待销毁时使用</li><li>静态变量用于存储变量创建状态，将其设为 <code>int flag</code> ？此举造成冗余，不如利用静态实例指针</li></ul><p>理清三点后奉上本人渣码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Singleton();</span><br><span class="line">    <span class="keyword">static</span> Singleton* s_pInstance;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton();</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++中仅有静态整形常量才可于类内初始化，否则导致所有实例均含该静态成员</span></span><br><span class="line">Singleton* Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Singleton::~Singleton()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != Singleton::s_pInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> Singleton::s_pInstance;</span><br><span class="line">        Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">        Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看似完美，却木有考虑多线程下同时执行 <code>if (nullptr == Singleton::s_pInstance)</code> 情况，加锁加锁……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用window API操控锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LockBase()</span><br><span class="line">    &#123;</span><br><span class="line">        ::InitializeCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">    ~LockBase()</span><br><span class="line">    &#123;</span><br><span class="line">        ::DeleteCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ::EnterCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ::LeaveCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CRITICAL_SECTION cs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Singleton();</span><br><span class="line">    <span class="keyword">static</span> Singleton* s_pInstance;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton();</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Singleton::~Singleton()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != Singleton::s_pInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> Singleton::s_pInstance;</span><br><span class="line">        Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    LockBase lockBase;</span><br><span class="line">    lockBase.lock();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">        Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    lockBase.unlock();</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>very nice ! 😀 等等！其实这个锁的范围有点大了，我们可以再次优化，缩小范围<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        LockBase lockBase;</span><br><span class="line">        lockBase.lock();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">            Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        lockBase.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不但缩小范围，而且提升效率，感觉很棒棒(๑•̀ㅂ•́)و✧ 对照下书本<br>有木有搞错！结果书上说还有更加优秀的解法=_=</p><h2 id="力荐解法一：利用静态构造函数"><a href="#力荐解法一：利用静态构造函数" class="headerlink" title="力荐解法一：利用静态构造函数"></a>力荐解法一：利用静态构造函数</h2><p>静态构造函数：定义类时仅自动执行一次的函数<br>可能要让您失望了，书中使用C#，而C++没有静态构造函数！😂<br>先看看书中C#神级代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再看看 <code>C++</code> 模拟代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Singleton();</span><br><span class="line">    <span class="keyword">static</span> Singleton* s_pInstance;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton();</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实是在全局域中直接设定，略显牵强😝</p><h2 id="力荐解法二：实现按需创建实例"><a href="#力荐解法二：实现按需创建实例" class="headerlink" title="力荐解法二：实现按需创建实例"></a>力荐解法二：实现按需创建实例</h2><p>解法一中过早创建实例占用内存，所以可用高级语言中 <strong>类仅在使用时载入</strong> 的特性改进代码<br>C++无法实现此方法，以下依旧是书中C#神级代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Nested.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Nested</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// internal表示该变量仅可在同项目内调用</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="本题扩展"><a href="#本题扩展" class="headerlink" title="本题扩展"></a>本题扩展</h1><p>实现可继承单例，派生类都只能产生一个实例<br>可以在单例类中使用指针数组判断对应子类标记是否已存在，若存在直接返回，反之创建子类，应加锁实现</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 单例 </tag>
            
            <tag> Singleton </tag>
            
            <tag> 模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题1-赋值运算符函数</title>
      <link href="/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%981-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0/"/>
      <url>/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%981-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目：赋值运算符函数"><a href="#题目：赋值运算符函数" class="headerlink" title="题目：赋值运算符函数"></a>题目：赋值运算符函数</h1><p>如下为类型CMyString的声明，请为该类型添加赋值运算符函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyString</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CMyString(<span class="keyword">char</span>* pData=<span class="literal">NULL</span>);</span><br><span class="line">    CMyString(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line">    ~CMyString(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_pData;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目考察赋值运算符(=)函数声明，对于<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="comment">// 调用赋值运算符函数</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>考虑形如 <code>a = 1</code> ，视 <code>a</code> 为 <code>int</code> 对象则代码改为 <code>a.=(1)</code>，其中 <code>=</code> 为方法名， <code>1</code> 为实参，由此构造出函数声明雏形<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值 =(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>因为 <code>printf(&quot;%d&quot;, a = 1)</code> 输出值为运算结果，故而<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> =(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>由于运算符函数特殊性，函数名加上关键词operator<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>=(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>考虑函数仅对实参取值，故参数可常类型(const)引用传递，修改声明<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>= (<span class="keyword">const</span> <span class="keyword">int</span>&amp; num);</span><br></pre></td></tr></table></figure></p><p>考虑以下任意一种情况</p><ul><li><code>(a = 1) = 2</code> 运行通过说明 <code>(a = 1)</code> 返回值为可修改的左值即 <code>a</code></li><li><code>cout &lt;&lt; ... &lt;&lt; ...</code> 中的运算符函数 <code>&lt;&lt;</code> 可流式编写，说明 <code>cout &lt;&lt; ...</code> 返回值为可修改左值即<code>std::out&amp;</code></li></ul><p>故返回值需引用传递，修改声明<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>= (<span class="keyword">int</span>&amp; num);</span><br></pre></td></tr></table></figure></p><p>套用进类 <code>CMyString</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyString</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CMyString(<span class="keyword">char</span>* pData=<span class="literal">NULL</span>);</span><br><span class="line">    CMyString(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line">    ~CMyString(<span class="keyword">void</span>);</span><br><span class="line">    CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_pData;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>顺便把定义写了(应该是”深拷贝”赋值)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    m_pData = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_pData) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_pData, str.m_pData);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对照书本发现自己还是太嫩了，没有对各个变量进行判断，安全代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] m_pData;</span><br><span class="line">    m_pData = <span class="literal">nullptr</span>;</span><br><span class="line">    m_pData = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_pData) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_pData, str.m_pData);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而，事情并没有这么简单……，书中神级代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;str != <span class="keyword">this</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// (代码异常安全性)将new操作置于构造函数中，可保护当前m_pData数据免受delete</span></span><br><span class="line">        CMyString strTemp(str);</span><br><span class="line">        <span class="keyword">char</span> *pTemp = strTemp.m_pData;</span><br><span class="line">        strTemp.m_pData = <span class="keyword">this</span>-&gt;m_pData;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_pData = pTemp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 算法 </tag>
            
            <tag> 赋值 </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机图形学-直线</title>
      <link href="/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B4%E7%BA%BF/"/>
      <url>/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B4%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h1 id="直线绘制算法"><a href="#直线绘制算法" class="headerlink" title="直线绘制算法"></a>直线绘制算法</h1><p><em>本文介绍内容归属计算机图形学范畴，基于二维平面直角坐标系绘制</em></p><hr><h2 id="为何研究直线绘制算法？"><a href="#为何研究直线绘制算法？" class="headerlink" title="为何研究直线绘制算法？"></a>为何研究直线绘制算法？</h2><p>现实世界绘制直线(段)只靠直尺和笔，而计算机显示图形需点亮屏幕像素点——绘点成线(段)</p><p>如同一连串英文句点绘制而成的分割线，效果如下（<em>离散化的近似表现</em>，假使放大页面会出现明显间隙）</p><p>…………………………………………………………………….</p><p>可惜直线不只是水平线，还包括斜线吖！（QAQ）</p><p>为此，图形学者致力寻找高效绘点算法 (\掌声)。我们将讨论以下三种直线绘制算法：</p><ol><li>DDA算法<ul><li>算法思想<strong>简单</strong></li><li>直线平滑性差，效率较高</li></ul></li><li>逐点比较算法（亦称插补法）<ul><li><strong>工业常用</strong>算法</li><li>直线平滑性好，效率较低</li></ul></li><li>Breseham算法<ul><li><strong>高效</strong></li><li>兼并DDA算法与插补法思想</li></ul></li></ol><h2 id="DDA（DIgital-differential-analyzer）算法"><a href="#DDA（DIgital-differential-analyzer）算法" class="headerlink" title="DDA（DIgital differential analyzer）算法"></a>DDA（DIgital differential analyzer）算法</h2><p>聪明的数学家早将直线用数学公式表示出来 <strong>y = k · x + b</strong></p><p>求解两个未知量 <code>k、b</code> 我们只需y知晓两组点数据即可（两点绘制一条直线），那么我们就用线段的起点和终点代入公式吧。（^_^）</p><p><code>起点p0(0, 0) 终点p6(6, 4) -&gt; k = 1.5，b = 0</code>。观察发现当 <code>x2 = x1 + 1</code> 时，<code>y2 = y1 + k</code></p><p>计算机像素单位长度为1（即像素点数据均为整数），我们凑巧将 y2 取整成 y2’ 即得需点亮像素点位置 <code>(x2, y2&#39;)</code></p><p>依此类推，<code>x3 = x2 + 1，y3 = y2 + k，y3&#39; = 取整y3</code> ……</p><p>大功告成？哦不！我们还能优化一下效率</p><ul><li><p>当直线斜率 <code>k &lt; 1</code> 时，我们以x为主，采用 <code>x2 = x1 + 1</code> 的步进方式，加快水平方向延伸速度</p></li><li><p>当直线斜率 <code>k &gt; 1</code> 时，我们以y为主，采用 <code>y2 = y1 + 1</code> 的步进方式，加快垂直方向延伸速度</p></li></ul><p><strong><em>取整步骤需要对小数四舍五入，对效率略有影响</em></strong></p><p>最终代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用openGL的glut库</span></span><br><span class="line"><span class="comment">#include &lt;gl\glut.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="comment">x1 = 0，y1 = 0</span></span><br><span class="line"><span class="comment">x2 = 6，y2 = 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLineDDA</span><span class="params">(GLint x1, GLint y1, GLint x2, GLint y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//置颜色为红</span></span><br><span class="line"><span class="keyword">int</span> dx = x2 - x1;</span><br><span class="line"><span class="keyword">int</span> dy = y2 - y1;</span><br><span class="line">dx = <span class="built_in">abs</span>(dx);</span><br><span class="line">dy = <span class="built_in">abs</span>(dy);</span><br><span class="line"><span class="keyword">int</span> step = dx &gt; dy ? dx : dy;<span class="comment">//判断k与1的关系，若dx大，水平方向延伸为主；若dy大，垂直方向延伸为主</span></span><br><span class="line"><span class="keyword">double</span> xin = dx / step;<span class="comment">//x轴步长</span></span><br><span class="line"><span class="keyword">double</span> yin = dy / (<span class="keyword">double</span>)step;<span class="comment">//y轴步长</span></span><br><span class="line"><span class="keyword">double</span> x = x1;</span><br><span class="line"><span class="keyword">double</span> y = y1;</span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= step; i++)</span><br><span class="line">&#123;</span><br><span class="line">glVertex2f(x / <span class="number">10.0</span>, <span class="keyword">int</span>(y + <span class="number">0.5</span>) / <span class="number">10.0</span>);<span class="comment">//int(y + 0.5)将y值四舍五入，绘于标准化坐标系，故除以10.0</span></span><br><span class="line">x = x + xin;</span><br><span class="line">y = y + yin;</span><br><span class="line">&#125;</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/DDA.PNG" alt="DDA算法效果图"></p><h2 id="逐点比较算法（插补法）"><a href="#逐点比较算法（插补法）" class="headerlink" title="逐点比较算法（插补法）"></a>逐点比较算法（插补法）</h2><p>此算法以像素点为主，<strong>第一象限</strong>前提下考虑<strong>右方向</strong>和<strong>上方向</strong>像素点与直线位置，二选一点亮</p><p>同样取 <code>起点p0(0, 0) 终点pn(6, 4)</code> 代入公式 <strong>y = k · x + b</strong> 得 <code>k = 1.5，b = 0</code></p><p>当像素点 <code>p</code> 在直线上方时 <code>yp / xp &gt; (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp &gt; 0</code></p><p>当像素点 <code>p</code> 在直线中时 <code>yp / xp = (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp = 0</code></p><p>当像素点 <code>p</code> 在直线下方时 <code>yp / xp &lt; (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp &lt; 0</code></p><p>把 <code>yp * (x6 - x0) - (y6 - y0) * xp</code> 记为 <code>F</code> 则 <code>F = yp * (x6 - x0) - (y6 - y0) * xp</code> 即为偏差公式，且起点偏差应为 <code>F0 = 0</code></p><ol><li><p>当 <code>F &gt; 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p></li><li><p>当 <code>F = 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）或 <code>y2 = y1 + 1</code>（即点亮上方像素点）</p></li><li><p>当 <code>F &lt; 0</code> 时，<code>y2 = y1 + 1</code>（即点亮上方像素点）</p></li></ol><p>但逐次求解含有乘法的偏差公式严重影响效率<del>有木有啊</del>，简化为下式（当 <code>F = 0</code> 时取 <code>x2 = x1 + 1</code>）</p><ul><li><p>当 <code>F1 &gt;= 0</code> 时 <code>F2 = yp * (x6 - x0) - (y6 - y0) * (xp + 1) = F1 - (y6 - y0)</code></p></li><li><p>当 <code>F1 &lt; 0</code> 时 <code>F2 = (yp + 1) * (x6 - x0) - (y6 - y0) * xp = F1 + (x6 - x0)</code></p></li></ul><p><strong><em>因为可能点亮上方像素点，意味同一y值下不只点亮一点像素，故效率较低</em></strong></p><p>同理可得第二象限、第三象限、第四象限求法，请读者自行计算，不再赘述（偷个懒 \滑稽）</p><p>最终代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用openGL的glut库</span></span><br><span class="line"><span class="comment">#include &lt;gl\glut.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLineInsert</span><span class="params">(GLint x1, GLint y1, GLint x2, GLint y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//置颜色为红</span></span><br><span class="line"><span class="keyword">int</span> dx = x2 - x1;</span><br><span class="line"><span class="keyword">int</span> dy = y2 - y1;</span><br><span class="line"><span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> x = x1;</span><br><span class="line"><span class="keyword">double</span> y = y1;</span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line"><span class="keyword">while</span> (x &lt; x2 + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">glVertex2f(x / <span class="number">10.0</span>, y / <span class="number">10.0</span>);<span class="comment">//绘制于标准化坐标系，故除以10.0</span></span><br><span class="line"><span class="keyword">if</span> (f &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line">f = f - dy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">y = y + <span class="number">1</span>;</span><br><span class="line">f = f + dx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/Insert.PNG" alt="插补法效果图"></p><h2 id="Bresenham算法"><a href="#Bresenham算法" class="headerlink" title="Bresenham算法"></a>Bresenham算法</h2><p>此算法基于DDA算法进行逐点比较改进而来，同逐点比较法以像素点为主，考虑<strong>右方向</strong>和<strong>右上方向</strong>像素点与直线位置，二选一点亮</p><p>无耻地盗个图</p><p><img src="https://camo.githubusercontent.com/c5669fe7d006c897cf652afa9a06f9ed9e773553/68747470733a2f2f696d6773612e62616964752e636f6d2f6261696b652f63302533446261696b6538302532433525324335253243383025324332362f7369676e3d36326235313930343938353034666332623635326238353738346234386337342f643031333733663038323032356161666539393465626337663865646162363430333466316131332e6a7067" alt="Bresenham原理图"></p><p>同样取 <code>起点p0(0, 0) 终点p6(6, 4)</code> 代入公式 <strong>y = k · x + b</strong> 得 <code>k = 1.5，b = 0</code></p><p>存在规律 <code>y2 = y1 + k</code>，若 <code>y1</code> 偏上则点亮右上方像素点，若 <code>y2</code> 偏下则点亮右方像素点，即比较交点 <code>y2</code> 与像素间距中点位置</p><p>记 <code>d = (y2 - y1) / (x2 - x1) + (y2 - y1) / (x2 - x1) - └ (y2 - y1) / (x2 - x1) + (y1 - y0) / (x1 - x0) ┘</code> ，（<code>└x┘</code> 表示取下整，如 <code>└1.2┘ = 1</code>；减去取下整值是为保证 <code>d ∈ [0, 1]</code>）则</p><p>当 <code>d &gt; 0.5</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）</p><p>当 <code>d = 0.5</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）或 <code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>当 <code>d &lt; 0.5</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>进一步设 <code>e = d - 0.5</code> 则</p><p>当 <code>e &gt; 0</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）</p><p>当 <code>e = 0</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）或 <code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>当 <code>e &lt; 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>至此算法演变为判断 <code>e</code> 的正负号，既然如此我们可将算式转为整数加减形式避免除法提高效率</p><p><em>`e = (2d - 1) </em> (x2 - x1) <em> …… </em> (x1 - x0) = 2 <em> (y2 - y1) </em> …… <em> (x1 - x0) + …… + (y1 - y0) </em> …… <em> (x2 - x1) - 2 </em> └ (y2 - y1) / (x2 - x1) + …… + (y1 - y0) / (x1 - x0) ┘ <em> (x2 - x1) </em> …… <em> (x1 - x0)  - 2 </em> └ …… + (y1 - y0) / (x1 - x0) ┘ <em> (x2 - x1) </em> …… <em> (x1 - x0) - (x2 - x1) </em> …… <em> (x1 - x0)`</em></p><p>好家伙，劳资还是坚持打粗来了（= =）</p><p>看似有规律，采取数学归纳法</p><p>记 <code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - 2 * └ (y1 - y0) / (x1 - x0) ┘ * (x1 - x0) - (x1 - x0)</code></p><p>记 <code>e2 = (2d2 - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - 2 * └ (y2 - y1) / (x2 - x1) + (y1 - y0) / (x1 - x0) ┘ * (x2 - x1) * (x1 - x0) - 2 * └ (y1 - y0) / (x1 - x0) ┘ * (x2 - x1) * (x1 - x0) - (x2 - x1) * (x1 - x0)</code></p><p>取下整采用分情况讨论（当 <code>d = 0.5</code> 时，<code>x2 = x1 + 1</code>）</p><p>当 <code>d2 &lt; 1</code> 时</p><p><code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - (x1 - x0)</code></p><p><code>e2 = (2d2 - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - (x2 - x1) * (x1 - x0)</code></p><p>即</p><p><code>e2 = e1 * (x2 - x1) + 2 * (y2 - y1) * (x1 - x0)</code></p><p>当 <code>d2 &gt; 1</code> 或 <code>d2 = 1</code> 时</p><p><code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - (x1 - x0)</code></p><p><code>e2 = (2(d2 - 1) - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - (x2 - x1) * (x1 - x0) - 2 * (x2 - x1) * (x1 - x0)</code></p><p>即</p><p><code>e2 = e1 * (x2 - x1) + 2 * (y2 - y1) * (x1 - x0) - 2 * (x2 - x1) * (x1 - x0)</code></p><p>大可利用编程语言 <code>d = d + k</code> 特性，且 <code>dx = (x2 - x1) = 1，dy = (y2 - y1) = k</code> 为固定值</p><p>当 <code>d &lt; 1</code> 即 <code>d - 0.5 &lt; 1 - 0.5 -&gt; 2 * (d - 0.5) &lt; 1</code> -&gt; <code>2 * (d - 0.5) * dx &lt; dx</code> -&gt; <code>e &lt; dx</code> 时</p><p><code>e = e * dx + 2 * dy * dx</code></p><p>当 <code>d &gt; 1</code> 或 <code>d = 1</code> 同理即 <code>e &gt; dx</code> 或 <code>e = dx</code> 时</p><p><code>e = e * dx + 2 * dy * dx - 2 * dx * dx</code></p><p><strong><code>e</code> 初始值为 <code>e0 = 2 * (0 - 0.5) * (x1 - x0) = -(x1 - x0) = -dx</code></strong></p><p><strong>当 <code>e &gt; dx</code> 时，<code>e = e + 2 * dy * dx - 2 * dx * dx</code>（即点亮右上方像素点）</strong></p><p><strong>当 <code>e = dx</code> 时，<code>e = e + 2 * dy * dx - 2 * dx * dx</code>（即点亮右上方像素点）</strong></p><p><strong>当 <code>e &lt; dx</code> 时，<code>e = e - 2 * dx * dx</code>（即点亮右方像素点）</strong></p><p><strong><em>同一y值下仅点亮一点像素，且计算过程均为加减法 (上式乘数固定值)，适用各象限无需分类，高效快捷</em></strong></p><p>最终代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用openGL的glut库</span></span><br><span class="line"><span class="comment">#include &lt;gl\glut.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLineBresenham</span><span class="params">(GLint x1, GLint y1, GLint x2, GLint y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//置颜色为红</span></span><br><span class="line"><span class="keyword">int</span> dx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> dy = (y2 - y1) / (<span class="keyword">double</span>)(x2 - x1);</span><br><span class="line"><span class="keyword">double</span> e = -dx;</span><br><span class="line"><span class="keyword">double</span> x = x1;</span><br><span class="line"><span class="keyword">double</span> y = y1;</span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line"><span class="keyword">while</span> (x &lt; x2 + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">glVertex2f(x / <span class="number">10.0</span>, y / <span class="number">10.0</span>);<span class="comment">//绘制于标准化坐标系，故除以10.0</span></span><br><span class="line">x++;</span><br><span class="line">e = e + <span class="number">2</span> * dy * dx;<span class="comment">//可换为单一变量无需多次做乘法</span></span><br><span class="line"><span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line">e = e - <span class="number">2</span> * dx * dx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/Bresenham.PNG" alt="Bresenham算法效果图"></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><em><a href="http://baike.baidu.com/item/DDA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">DDA算法_百度百科</a></em></p><p><em><a href="https://wenku.baidu.com/view/7df948146c175f0e7cd1377f.html" target="_blank" rel="noopener">逐点比较法直线插补</a></em></p><p><em><a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" target="_blank" rel="noopener">Bresenham’s line algorithm - Wikipedia</a></em></p><p><em><a href="http://www.360doc.com/content/13/1220/09/11400509_338596444.shtml" target="_blank" rel="noopener">Bresenham直线算法与画圆算法</a></em></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 直线 </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法总结(上)</title>
      <link href="/2018/03/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93(%E4%B8%8A)/"/>
      <url>/2018/03/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93(%E4%B8%8A)/</url>
      <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><hr><h2 id="What’s-Algorithm"><a href="#What’s-Algorithm" class="headerlink" title="What’s Algorithm ?"></a>What’s Algorithm ?</h2><p>提及“<strong>算法</strong>”，小白面对高大上说词仰慕之心油然而生 @o@</p><p>然而，算法并不神秘 = =</p><p>顾名思义，<strong>计算方法</strong>简称算法（什，什，什，什么！这么简单？→_→）</p><p>举个栗子：</p><blockquote><p>从小学就接触的乘法：对 n+n+n+…+n 的简写就是一种算法（递推法<a href="递推法即是把一个复杂的庞大的计算过程转化为简单过程的多次重复">^A</a>）,<br>算法注定要有输入与输出：算式中的 n 即为输入，乘积即为输出。</p></blockquote><p>注：</p><ul><li>算法中的状态变化是不确定的</li><li>算法必定能在执行有限个步骤之后终止</li><li>某些算法加入随机输入，称为随机化算法</li></ul><h2 id="How-to-Assess-Algorithm"><a href="#How-to-Assess-Algorithm" class="headerlink" title="How to Assess Algorithm ?"></a>How to Assess Algorithm ?</h2><p>对算法的评定分析主要从<strong>时间复杂度</strong>(所耗时间长短)与<strong>空间复杂度</strong>(空间开支大小)来考虑。</p><p>关于复杂度的计算需要引入如下渐近记号：</p><blockquote><p><em>大O记号：</em></p><blockquote><p><em>O(g(n)) = { f(n) : 存在正常数c和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= f(n) &lt;= cg(n) }</em></p></blockquote></blockquote><blockquote><p><em>大Ω记号：</em></p><blockquote><p><em>Ω(g(n)) = { f(n) : 存在正常数c和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= cg(n) &lt;= f(n) }</em></p></blockquote></blockquote><blockquote><p><em>大Θ记号：</em></p><blockquote><p><em>Θ(g(n)) = { f(n) : 存在正常数c1和c2和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= c1g(n) &lt;= f(n) &lt;= c2g(n) }</em></p></blockquote></blockquote><p><em>数学证明资料：<a href="http://www.cnblogs.com/zabery/archive/2011/07/19/2110994.html" target="_blank" rel="noopener">计算机算法分析之渐进记号</a></em></p><p>具体计算方式将于实例中给出 ～(~▽~)～</p><h2 id="DIY-Algorithm-！"><a href="#DIY-Algorithm-！" class="headerlink" title="DIY Algorithm ！"></a>DIY Algorithm ！</h2><p>以下给出排序算法C++代码：</p><p>1.冒泡排序（Bubble Sort）<a href="冒泡排序的思想是让最大的数浮动到数组最后的位置，其次大的数浮动到数组倒数第二个位置，依次推类">^B</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>时间复杂度分析：</p><p>考虑最坏情况–将逆序数列变为顺序（此情况下，每一次比较都需要进行交换运算） T_T</p><blockquote><p>再举个栗子：<strong>数列 5 4 3 2 1 进行冒泡升序排列</strong><br>第一次外层循环从第一个数5开始到倒数第二个数2结束，<br>共进行4次比较交换运算，5移到末尾。<br>第二次外层循环从第一个数4开始到倒数第三个数2结束。<br>共进行3次比较交换运算，4移到倒数第二个数。<br>……<br>依次推类，总比较次数为 4 + 3 + 2 + 1 = 10 次</p></blockquote><p>证明：</p><p>根据数学归纳法,对于n位的数列则有比较次数为<code>(n-1) + (n-2) + ... + 1 = n \* (n - 1) / 2 = (n^2 - n) / 2</code></p><p>如图<img src="http://images.51cto.com/files/uploadimg/20110826/211021569.jpg" alt="比较次数"></p><p>若n = 10000，则<code>(n^2 - n) / 2 = (100000000 - 10000) / 2</code></p><p>相对 100000000 来说 10000 微乎其微，故总计算次数约为<code>0.5 \* N^2</code></p><p>用O(N^2)就表示了其数量级（忽略前面系数0.5）</p><p>得 <strong>冒泡排序的时间复杂度为O(N^2)</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序改进版：若遍历中得知数组有序则结束排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改进算法后，对于一个有序数组完成一次外层循环后就会结束，共发生 N - 1 次比较，故升级版冒泡排序在最优情况下的时间复杂度为O(N)</p><p>2.插入排序(Insert Sort)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp;j--)</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>资料：<a href="http://baidu.ku6.com/watch/05586300336858352205.html" target="_blank" rel="noopener">插入排序舞蹈</a></em></p><p>3.*归并排序（Merge Sort）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &lt; last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">mergeSort(arr,temp,start,mid);</span><br><span class="line">mergeSort(arr,temp,mid + <span class="number">1</span>,last);</span><br><span class="line">arrUnion(arr,temp,start,mid,last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrUnion</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">i = start;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line">k = start;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span> &amp;&amp; j != last + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[j])</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">while</span>(j != last + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line"><span class="keyword">for</span>(i = start;i &lt; last + <span class="number">1</span>;i++)</span><br><span class="line">arr[i] = temp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>资料：<a href="http://visualgo.net/sorting" target="_blank" rel="noopener">排序动画演示</a></em></p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison ."></a>Comparison .</h2><p>下面我们通过这段C语言代码比较排序速度，直观感受时间复杂度。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSortRand</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortPlus</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choseSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start, end;</span><br><span class="line">    <span class="keyword">int</span> a[N], b[N], c[N], d[N], e[N], f[N], g[N];</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = rand()%<span class="number">100</span> + rand()%<span class="number">1000</span>;</span><br><span class="line">        <span class="comment">//g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = N - i;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line">    quickSortRand(a,<span class="number">0</span>,N - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"随机快速排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(a,N);</span></span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line">    quickSort(b,<span class="number">0</span>,N - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"快速排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(b,N);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* temp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</span><br><span class="line">    start = clock();</span><br><span class="line">    mergeSort(c,temp,<span class="number">0</span>,N - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"归并排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(c,N);</span></span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    insertSort(d,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"插入排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(d,N);</span></span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    bubbleSort(e,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"冒泡排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(e,N);</span></span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    bubbleSortPlus(f,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"升级版冒泡排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(f,N);</span></span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line">    choseSort(g,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"选择排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(g,N);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &lt; last)</span><br><span class="line">&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">int</span> i = start;</span><br><span class="line"><span class="keyword">int</span> j = last;</span><br><span class="line"><span class="keyword">while</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= arr[start] &amp;&amp; j != i)</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= arr[start] &amp;&amp; i != j)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[start];</span><br><span class="line">arr[start] = temp;</span><br><span class="line">quickSort(arr, start, i - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, i + <span class="number">1</span>, last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSortRand</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &lt; last)</span><br><span class="line">&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">int</span> i = start;</span><br><span class="line"><span class="keyword">int</span> j = last;</span><br><span class="line"><span class="keyword">int</span> pos = rand() % (last - start) + start;</span><br><span class="line">temp = arr[start];</span><br><span class="line">arr[start] = arr[pos];</span><br><span class="line">arr[pos] = temp;</span><br><span class="line"><span class="keyword">while</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= arr[start] &amp;&amp; j != i)</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= arr[start] &amp;&amp; i != j)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[start];</span><br><span class="line">arr[start] = temp;</span><br><span class="line">quickSortRand(arr, start, i - <span class="number">1</span>);</span><br><span class="line">quickSortRand(arr, i + <span class="number">1</span>, last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr,temp,start,mid);</span><br><span class="line">        mergeSort(arr,temp,mid + <span class="number">1</span>,last);</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">i = start;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line">k = start;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span> &amp;&amp; j != last + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[j])</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">while</span>(j != last + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line"><span class="keyword">for</span>(i = start;i &lt; last + <span class="number">1</span>;i++)</span><br><span class="line">arr[i] = temp[i];</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp;j--)</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortPlus</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    T temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span> &amp;&amp; flag;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choseSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; n;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i] &gt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行条件：</p><p><strong>编译程序VC 6.0</strong></p><p><strong>数组成员 5000</strong></p><p>执行结果：</p><p><strong>随机快速排序用时0.001000sec</strong></p><p><strong>快速排序用时0.001000sec</strong></p><p><strong>归并排序用时0.002000sec</strong></p><p><strong>插入排序用时0.033000sec</strong></p><p><strong>冒泡排序用时0.090000sec</strong></p><p><strong>升级版冒泡排序用时0.089000sec</strong></p><p><strong>选择排序用时0.083000sec</strong></p><p>下面我们通过这段JAVA语言代码比较排序速度，直观感受时间复杂度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">package</span> pers.cz.sortcompare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> pers.cz.sortcompare.Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> n = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] d = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">long</span> start, end;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = rand.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.QuickSort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"QuickSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(a);</span></span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.QuickSortRand(b, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"QuickSortRand cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(b);</span></span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Sort.MargeSort(c, <span class="number">0</span>, n - <span class="number">1</span>, temp);</span><br><span class="line">        temp = <span class="keyword">null</span>;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"MargeSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(c);</span></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.InsertSort(d);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"InstertSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(d);</span></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.BubbleSortPlus(e);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"BubbleSortPlus cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(e);</span></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.BubbleSort(f);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"BubbleSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(f);</span></span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.ChoseSort(g);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"ChoseSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(g);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArrData</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sort.java</span></span><br><span class="line"><span class="keyword">package</span> pers.cz.sortcompare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ChoseSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSortPlus</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> &amp;&amp; flag; i++) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j, number;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                number = arr[i];</span><br><span class="line">                <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; number; j--) &#123;</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + <span class="number">1</span>] = number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MargeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">            Sort.MargeSort(arr, start, mid, temp);</span><br><span class="line">            Sort.MargeSort(arr, mid + <span class="number">1</span>, last, temp);</span><br><span class="line">            <span class="keyword">int</span> i, j, k;</span><br><span class="line">            i = start;</span><br><span class="line">            j = mid + <span class="number">1</span>;</span><br><span class="line">            k = start;</span><br><span class="line">            <span class="keyword">while</span> (i != mid + <span class="number">1</span> &amp;&amp; j != last + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                    temp[k++] = arr[i++];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp[k++] = arr[j++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != mid + <span class="number">1</span>) &#123;</span><br><span class="line">                temp[k++] = arr[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (j != last + <span class="number">1</span>) &#123;</span><br><span class="line">                temp[k++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = start; i &lt; last + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                arr[i] = temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">int</span> i = start;</span><br><span class="line">            <span class="keyword">int</span> j = last;</span><br><span class="line">            <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[j] &gt;= arr[start] &amp;&amp; j != i) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] &lt;= arr[start] &amp;&amp; i != j) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[start];</span><br><span class="line">            arr[start] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSortRand</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">int</span> i = start;</span><br><span class="line">            <span class="keyword">int</span> j = last;</span><br><span class="line">            Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> pos = rand.nextInt(last - start) + start;</span><br><span class="line">            temp = arr[start];</span><br><span class="line">            arr[start] = arr[pos];</span><br><span class="line">            arr[pos] = temp;</span><br><span class="line">            <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[j] &gt;= arr[start] &amp;&amp; j != i) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] &lt;= arr[start] &amp;&amp; i != j) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[start];</span><br><span class="line">            arr[start] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行条件：</p><p><strong>编译程序NetBeans IDE 8.1</strong></p><p><strong>数组成员 1000</strong></p><p>执行结果：</p><p><strong>QuickSort cost time(sec):1</strong></p><p><strong>QuickSortRand cost time(sec):0</strong></p><p><strong>MargeSort cost time(sec):1</strong></p><p><strong>InstertSort cost time(sec):5</strong></p><p><strong>BubbleSortPlus cost time(sec):14</strong></p><p><strong>BubbleSort cost time(sec):18</strong></p><p><strong>ChoseSort cost time(sec):9</strong></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 冒泡 </tag>
            
            <tag> 插入 </tag>
            
            <tag> 归并 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Test</title>
      <link href="/2018/03/22/Test/"/>
      <url>/2018/03/22/Test/</url>
      <content type="html"><![CDATA[<p>这是一个测试帖</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> first </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鄙人不才，小博供阅</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>QQ：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=2506649223&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener">2506649223</a></li><li>Email：<a href="mailto:cz335360@gmail.com" target="_blank" rel="noopener">cz335360@gmail.com</a></li></ul>]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
