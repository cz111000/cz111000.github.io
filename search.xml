<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>字符集总结</title>
      <link href="/2018/05/05/%E5%AD%97%E7%AC%A6%E9%9B%86%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/05/%E5%AD%97%E7%AC%A6%E9%9B%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="https://img.vim-cn.com/b5/2b3603aa71348a0956bac67ccc45303ec07e05.png" alt="一图读懂各种字符集"></p><p>SBCS(single-byte character set)：ISO-8859-1<br>DBCS(double-byte character set)：USC-2<br>MBCS(multi-byte character set)：GB2312、GBK、UTF-8、…<br>Big Endian：正序存储字节，对于字符串 <code>AB</code> 存储形式为 <code>00 41 00 42</code><br>Littile Endian：逆序存储字节，对于字符串 <code>AB</code> 存储形式为 <code>41 00 42 00</code><br>Big Endian与Littile Endian使用BOM区分：<br>BOM(Big Endian)：文件开头添加0xFEFF<br>BOM(Littile Endian)：文件开头添加0xFFFE<br>下图为windows系统记事本存储对应编码：<br><img src="https://img.vim-cn.com/80/0a9c7790e1566c24c40c3f6ef9751a8058eb47.png" alt="记事本存储对应编码"></p><p>USC-2转UTF-8规则：<br>ISO-8859-1 不变</p><p>00000000 10000000↔0x0080 =&gt; <strong>110</strong>0000 <strong>10</strong>000000<br>↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓<br>00000xxx 1xxxxxxxx↔0x0XXX =&gt; <strong>110</strong>xxxxx <strong>10</strong>xxxxxx<br>↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓<br>00000111 11111111↔0x07FF =&gt; <strong>110</strong>11111 <strong>10</strong>111111</p><p>00001000 00000000↔0x0800 =&gt; <strong>1110</strong>0000 <strong>10</strong>000000 <strong>10</strong>000000<br>↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓<br>xxxx1xxx xxxxxxxxx↔0xXXXX =&gt; <strong>1110</strong>xxxx <strong>10</strong>xxxxxx <strong>10</strong>xxxxxx<br>↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓<br>11111111 11111111↔0xFFFF =&gt; <strong>1110</strong>1111 <strong>10</strong>111111 <strong>10</strong>111111</p><p>Q：在记事本中存储字符串“联通”再次打开乱码？<br>A：<br>记事本默认使用ANSI编码存储字符，在简体中文系统中即为GBK编码。“联通”对应GBK编码为：<br>11000001 10101010<br>–C—-1– –A—-A–<br>11001101 10101000<br>–C—-D– –A—-8–<br>与UTF-8两字节编码规则相吻合，故记事本误以为是UTF-8编码的两个字符<br><strong>110</strong>00001 <strong>10</strong>101010<br><strong>110</strong>01101 <strong>10</strong>101000<br>去除前缀，前面补0，得出相应USC-2编码<br>00000000 01101010<br>–0—-0– –6—-A–<br>00000011 01101000<br>–0—-3– –6—-8–<br>故乱码</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符 </tag>
            
            <tag> 字符集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH框架-初识Spring</title>
      <link href="/2018/04/23/SSH%E6%A1%86%E6%9E%B6-%E5%88%9D%E8%AF%86Spring/"/>
      <url>/2018/04/23/SSH%E6%A1%86%E6%9E%B6-%E5%88%9D%E8%AF%86Spring/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最初的Java EE（现被Oracle公司改称Jakarta EE，真会玩😂）规范由Sun公司制定，包含JDBC、JNDI、JavaBean、Annotation、JPA、CDI（容器依赖注入）等多项重量级技术，其实现纷繁复杂。<br>而Spring框架轻量实现Java EE技术，封装诸如JDBC、JavaMail多项技术降低使用难度，且实现控制反转（IoC）模式与面向切面编程（AOP）的独特功能大大解放程序员双手！</p><h1 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h1><p>IoC（控制反转，即对象控制权转交至容器）是一种全新的设计模式，通过DI（依赖注入，即自动注入被依赖属性）将对象的创建与维护转交IoC容器（或称工厂）控制。用户仅需编写(xml)配置文件无需 <code>new</code> 操作即可降低代码耦合度。<br>其原理类似工厂模式的反射机制 <code>Class.forName(str).newInstance()</code> 。</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP（面向切面编程）是一种函数式编程的技术。通过预编译或动态代理插入执行业务无关片段，如日志记录、安全控制、性能统计。用户无需增添业务内容从而降低代码耦合度。<br>通俗地说，视业务代码为面团，视插入代码段为可多次重复切入使用的刀片，刀切面行为就是面向切面编程。如下图所示<br><img src="https://img.vim-cn.com/86/0fdbdc454594de2397a63caa3a951409b4badf.png" alt="AOP概念图"></p><ul><li>预编译指在编译过程中插入代码段，需要相关编译器，实现代表有AspectJ框架。</li><li><p>动态代理指在执行过程中动态生成代理对象，无需特定编译器，实现代表分为JDK及CGLIB类库：</p><ul><li><p>JDK采用反射机制实现动态代理，仅代理接口，使用方式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doJob</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleImpl</span> <span class="keyword">implements</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Running method: doJob()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxyObject, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//执行日志记录等功能</span></span><br><span class="line">        System.out.println(<span class="string">"Before method: "</span> + method.getName());</span><br><span class="line">        Obeject result = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"After method: "</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该方法无需改动</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        ProxyHandler proxyHandler = <span class="keyword">new</span> ProxyHandler(target);</span><br><span class="line">        <span class="comment">//第一个参数用于生成代理类，第二个参数用于指定代理接口集合，第三个参数用于实现代理对象方法</span></span><br><span class="line">        T proxy = (T) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                proxyHandler</span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Example example = Proxy.getProxy(<span class="keyword">new</span> ExampleImpl());</span><br><span class="line">        example.doJob();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newProxyInstance</code> 方法实现原理如下：<br><code>`</code>Java<br>public static Object newProxyInstance(ClassLoader classLoader, Class&lt;?&gt;[] intfs, InvocationHandler handler) throws IllegalArgumentException {<br>  Objects.requireNonNull(handler);<br>  final Class&lt;?&gt;[] interfaces = intfs.clone();<br>  final SecurityManager sm = System.getSecurityManager();<br>  if (sm != null)</p><pre><code>checkProxyAccess(Reflection.getCallerClass(), classLoader, interfaces);</code></pre><p>  //创建代理类<br>  Class&lt;?&gt; clazz = getProxyClass0(classLoader, interfaces);<br>  /*</p><ul><li>根据生成的class通过反射获取构造函数对象并生成代理类实例<br>*/<br>try {<br> if (sm != null) {<pre><code>checkNewProxyPermission(Reflection.getCallerClass(), clazz);</code></pre> }<br> final Constructor&lt;?&gt; constructor = clazz.getConstructor(constructorParams);<br> final InvocationHandler finalHandler = handler;<br> if (!Modifier.isPublic(cl.getModifiers())) {<pre><code>AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() {    public Void run() {        cons.setAccessible(true);        return null;    }});</code></pre> }<br> return cons.newInstance(new Object[]{h});<br>} catch (IllegalAccessException|InstantiationException e) {<br> throw new InternalError(e.toString(), e);<br>} catch (InvocationTargetException e) {<br> Throwable t = e.getCause();<br> if (t instanceof RuntimeException) {<pre><code>throw (RuntimeException) t;</code></pre> } else {<pre><code>throw new InternalError(t.toString(), t);</code></pre> }<br>} catch (NoSuchMethodException e) {<br> throw new InternalError(e.toString(), e);<br>}<br>}<h1 id="Struts简史"><a href="#Struts简史" class="headerlink" title="Struts简史"></a>Struts简史</h1></li></ul></li></ul></li></ul><h1 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器(filter)"></a>过滤器(filter)</h1><h1 id="Struts2原理"><a href="#Struts2原理" class="headerlink" title="Struts2原理"></a>Struts2原理</h1><h1 id="Struts2使用"><a href="#Struts2使用" class="headerlink" title="Struts2使用"></a>Struts2使用</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h2 id="创建action"><a href="#创建action" class="headerlink" title="创建action"></a>创建action</h2>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH框架-初识Hibernate</title>
      <link href="/2018/04/08/SSH%E6%A1%86%E6%9E%B6-%E5%88%9D%E8%AF%86Hibernate/"/>
      <url>/2018/04/08/SSH%E6%A1%86%E6%9E%B6-%E5%88%9D%E8%AF%86Hibernate/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>早期的应用程序均直接调用数据库软件提供的方法手册读取数据，当需要对数据库进行更换、升级时，必须重写与数据库的通讯方法，这对开发人员是个巨大的挑战。因此孕育出JDBC解决方案。<br>JDBC(Java DataBase Connectivity)方案是Java连接数据库的标准规范。通过增加一层固定的标准类与接口，使得开发人员无需关注数据库操作方法，只需调用JDBC提供的各种API即可。而数据库生产商只需实现JDBC驱动层即可。如图所示：<br><img src="https://img.vim-cn.com/62/cf9adff5bed9654011a935c0f44be15980eb94.png" alt="JDBC简图"> <img src="https://img.vim-cn.com/e9/9d088616fa0c3a624145894150334460afb475.png" alt="JDBC API"><br>JDBC执行流程图如下：<br><img src="https://img.vim-cn.com/7c/4a08c875f8ffc2c4077b8979fba1fb54bd81a3.png" alt="JDBC执行流程图"><br>现在只需导入相应数据库JDBC驱动包，根据流程图，即可写出如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//根据Java反射机制动态加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">"com.dataBase.jdbc.Driver"</span>);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(</span><br><span class="line">                        <span class="string">"jdbc:dataBase://localhost:port/example"</span>,</span><br><span class="line">                        <span class="string">"username"</span>,</span><br><span class="line">                        <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JDBCUtil.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line">            rs = st.executeQuery(<span class="string">"select id,name,price from t_product where id='"</span> + id + <span class="string">"'"</span>);</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">float</span> price = rs.getFloat(<span class="string">"price"</span>);</span><br><span class="line">                Product product = <span class="keyword">new</span> Product(id, name, price);</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                st.close();</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在只用JDBCUtil类即可，而无需关心数据库调用方式。不过每次执行SQL语句均需重新创建Connection对象与数据库连接，且代码中依旧夹杂着驱动程序包名、JDBC URL地址、用户名、密码，不便修改。于是引入JNDI技术，通过创建数据库连接池缓存Connection对象，同时将配置字段写入XML配置文件，无需改动JDBC连接代码，以不变应万变。以Tomcat为例，操作如下：</p><ol><li><p>配置Tomcat，在web.xml配置文件中写入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>dataBaseDataSource<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">res-ref-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-ref-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">res-sharing-scope</span>&gt;</span>Shareable<span class="tag">&lt;/<span class="name">res-sharing-scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在MATA-INF文件夹中创建文件 <code>context.xml</code> 并写入以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiJARLocking</span>=<span class="string">"true"</span> <span class="attr">path</span>=<span class="string">"/webProject"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--auth="Container"表示资源由容器管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"dataBaseDataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">driverClassName</span>=<span class="string">"com.dataBase.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">url</span>=<span class="string">"jdbc:dataBase://localhost:port/example"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">username</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"password"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建JNDI工具类用于连接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connOracle = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Context initContext = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            DataSource ds = (DataSource)initContext.lookup(<span class="string">"java:comp/env/dataBaseDataSource"</span>);</span><br><span class="line">            <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>JNDI执行流程图如下：<br><img src="https://img.vim-cn.com/a9/47aa816bdbbafe3533c208ccd59dd8572e6f52.png" alt="JNDI执行流程图"></p><ol><li>创建Context对象读取配置文件</li><li>通过DataSource数据资源对象应用配置创建数据库连接池</li><li>创建Connection数据库连接对象，连接数据库</li><li>创建Statement数据库操作对象，用于数据存取操作</li><li>调用Statement会话对象的数据库操作方法返回ResultSet结果集对象。</li></ol><p>然而在有关数据库的操作代码中，我们依然需要使用 <code>模型(POJO, 即JavaBean) + 数据库操作层(Dao)</code> 模式，在Dao层（如上文ProductDao类）编写大量冗余代码以及不同SQL语句，为让生活更加美好，对JDBC轻量封装的Hibernate横空出世，其采用的ROM框架技术大受追捧。</p><h1 id="ROM技术"><a href="#ROM技术" class="headerlink" title="ROM技术"></a>ROM技术</h1><p>由于Java是面向对象编程（OOP）语言与关系型数据库思想格格不入，故产生ORM(Object Relationship Mapping)即对象关系映射技术，使开发人员更加专注于面向对象思考。</p><h1 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h1><p>Hibernate为一实现<strong>JPA标准（即 ROM+实体对象持久化 标准）</strong>的开源对象关系映射框架，支持分布式数据库。其对JDBC进行了轻量级对象封装，使得由直接操纵数据库变成使用依据映射数据表（XML配置文件）或注解生成的Java类，且生成的实体对象持续自动将数据变动保存至数据库（即持久化技术），从而以对象编程思维操纵数据库。同时，Hibernate摆脱不同数据库SQL语句差异，转而接收符合描述对象的HQL语句操作。</p><h1 id="Hibernate原理"><a href="#Hibernate原理" class="headerlink" title="Hibernate原理"></a>Hibernate原理</h1><p>Hibernate原理如图所示：<br><img src="https://img.vim-cn.com/70/c704106616b6ce07f62dc11f70ae1d23375337.png" alt="Hibernate原理"></p><ul><li>持久化对象：依据映射数据表（HBM，即关于类的XML配置文件）或注解生成的能够持续自动将数据变动保存至数据库的实体对象。</li><li>配置文件：即Hibernate配置文件hibernate.cfg.xml。</li><li>映射文件：持久化对象的Java类对应的映射数据表文件object.hbm.xml（如student.hbm.xml），用于数据库数据与Java对象转化。</li></ul><p>Hibernate执行流程如下：<br><img src="https://img.vim-cn.com/e1/6ad72dd100a768dae58a22eabe13bb6854487c.png" alt="Hibernate执行流程图"></p><ol><li>创建Configuration对象读取hibernate.cfg.xml配置文件</li><li>通过StandardServiceRegistryBuilder对象应用配置创建ServiceRegistry服务注册对象用于注册各项服务</li><li>创建MetaData元数据（数据库信息）对象，此步可省略，仅当需要执行表结构操作时使用</li><li>创建SessionFactory会话工厂对象，通过Configuration对象的 <code>buildSessionFactory(serviceRegistry)</code> 传入服务注册对象注册此工厂服务，用于生产封装了连接池中Connection对象的会话（Session）对象；若存在MetaData对象，也可调用其 <code>buildSessionFactory()</code> 方法</li><li>创建Session会话对象，用于数据存取操作</li><li>调用Session会话对象的 <code>beginTransaction()</code> 开启事务，通过回滚等操作避免部分修改造成数据不完整，确保数据库被正确修改</li><li>调用Session会话对象的数据库操作方法直接返回对象结果。</li></ol><p><strong>对比JNDI发现除去可省略的获取元数据对象步骤3，以及启动事务步骤6，基本大同小异。</strong><br>依据流程图，写出如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Metadata metadata;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Session session;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Transaction transaction;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        ServiceRegistry serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).configure().build();</span><br><span class="line">        metadata = <span class="keyword">new</span> MetadataSources(serviceRegistry).buildMetadata();</span><br><span class="line">        sessionFactory = metadata.buildSessionFactory();</span><br><span class="line">        session = sessionFactory.openSession();</span><br><span class="line">        transaction = session.beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Product product = HibernateUtil.session.get(Product.class, id);</span><br><span class="line">            <span class="keyword">return</span> product;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                HibernateUtil.transaction.commit();</span><br><span class="line">                HibernateUtil.session.close();</span><br><span class="line">                HibernateUtil.sessionFactory.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>省时省力有木有😂！<br><strong>Hibernate不但支持单个数据库JDBC连接方式，也支持多个数据库JTA连接方式</strong>，本文仅讨论单个数据库连接方式。</p><h1 id="Hibernate使用"><a href="#Hibernate使用" class="headerlink" title="Hibernate使用"></a>Hibernate使用</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>创建Java或Java Web项目并导入与Hibrenate相关的Jar开发包。<a href="http://hibernate.org/orm/releases/" target="_blank" rel="noopener">开发包下载地址</a></li><li><p>在src文件夹内创建hibernate.cfg.xml文件，该文件用于配置数据库连接方式、驱动程序包名、JDBC URL地址、用户名、密码等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:dataBase://localhost:port/schema<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.dataBase.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--属性dialect表示SQL方言，使用对应于数据库的SQL方言配置提高数据库操作效率--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.DataBaseDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>username<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出SQL语句至控制台，一般用于调试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--格式化SQL语句，即美化显示SQL语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最近会话的上下文（相关环境）类，仅当使用sessionFactory.getCurrentSession()时需要此配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分thread、jta、指定事务管理类名三种取值，thread表示在当前线程事务管理对象中寻找最近会话，jta表示在分布式事务管理对象中寻找最近会话--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--由于本文不讨论JTA分布式数据库连接方式，故只能取值thread--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--HBM（映射数据表）转DDL（数据库模式定义语言，即SQL关键词中的create alter drop ...）方式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分create、update两种取值，前者每次操作将重新创建表，后者仅修改表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建Hibernate工具类进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Metadata metadata;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Session session;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Transaction transaction;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        ServiceRegistry serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).configure().build();</span><br><span class="line">        metadata = <span class="keyword">new</span> MetadataSources(serviceRegistry).buildMetadata();</span><br><span class="line">        sessionFactory = metadata.buildSessionFactory();</span><br><span class="line">        <span class="comment">//使用getCurrentSession()无需手动关闭会话，由会话管理上下文（即事务管理对象）控制</span></span><br><span class="line">        session = sessionFactory.getCurrentSession();</span><br><span class="line">        transaction = session.beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="映射数据表"><a href="#映射数据表" class="headerlink" title="映射数据表"></a>映射数据表</h2><p>映射数据表文件内容模板如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding='UTF-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性package对应包名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"pacakge"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性name对应JavBean的类名--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性table对应数据库中存储此类数据的表名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">table</span>=<span class="string">"tb_table"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>id标签用于指定主键，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>generator标签用于指定主键生成策略（手动输入或自动增长等），例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--native表示主键值自动增长，根据数据库不同自动选择对应自增配置方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以下为class属性值可选内容：</p><ul><li>assigned：主键由程序生成</li><li>increment：主键为表中最大值加一</li><li>hilo：主键由高低位方式（high low）生成。先在表中增长high值，再在[0, max_low]区间中增长low值，最后计算high * (max_low + 1) + low得出主键值</li><li>seqhilo：同理hilo，使用序列存储high值</li><li>sequence：主键为序列中最大值加一</li><li>identity：主键由数据库自增字段生成</li><li>native：主键由identity或hilo或sequence生成</li><li>uuid：主键为通用唯一标识符（UUID）字符串</li><li>guid：类似uuid，主键为全球唯一标识符（GUID）字符串</li><li>foreign：主键为另一表中主键</li><li>select：主键由触发器生成</li></ul><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>property标签用于指定普通属性，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--column表示该字段在数据库中对应列--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--not-null表示该字段在数据库中是否禁止为空--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">not-null</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set标签用于指定集合属性，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--lazy表示是否采用延迟加载，即读取时才查找表中数据组成集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"scoreSet"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>key标签用于指定集合对应的外键列<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"scoreSet"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"scoreId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="one-to-one"><a href="#one-to-one" class="headerlink" title="one-to-one"></a>one-to-one</h3><p>one-to-one标签用于指定一对一关系，如学生信息表对身份证表<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--cascade表示进行关联操作的时机--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"cardId"</span> <span class="attr">class</span>=<span class="string">"package.Identity"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="one-to-many"><a href="#one-to-many" class="headerlink" title="one-to-many"></a>one-to-many</h3><p>one-to-many标签用于指定一对多关系，如教室表对学生信息表<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--写于Class.hbm.xml文件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"userSet"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"package.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="many-to-one"><a href="#many-to-one" class="headerlink" title="many-to-one"></a>many-to-one</h3><p>many-to-one标签用于指定多对一关系，如学生信息表对教室表<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--写于Student.hbm.xml文件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"userSet"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">class</span>=<span class="string">"package.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="many-to-many"><a href="#many-to-many" class="headerlink" title="many-to-many"></a>many-to-many</h3><p>many-to-many标签用于指定多对多关系，如学生信息表对教师表<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"userSet"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">lazy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"package.User"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>除某些表示类的注解外，适用于属性的注解既可置于属性上，也可置于对应get方法上，<strong>建议置于方法上</strong>。<br>关系注解可组合使用，如@OneToMany与@ManyToOne可分别在两个类中同时出现。</p><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><p>Entity注解用于表示类为实体（映射对象）类，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p>Table注解用于表示类对应的数据库表信息，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Embeddable"><a href="#Embeddable" class="headerlink" title="@Embeddable"></a>@Embeddable</h3><p>Embeddable注解用于表示类为嵌入式实体（映射对象）类（即数据库表中嵌入其所有属性，而不单独创建表），常与@Embedded联用，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Embedded"><a href="#Embedded" class="headerlink" title="@Embedded"></a>@Embedded</h3><p>Embedded注解用于表示嵌入式属性约束（即数据库表中嵌入其所有属性，而不单独创建表），常与@Embeddable联用，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123; <span class="keyword">this</span>.address = address; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="EmbeddedId"><a href="#EmbeddedId" class="headerlink" title="@EmbeddedId"></a>@EmbeddedId</h3><p>EmbeddedId注解用于表示嵌入式主键属性约束，类似@Embedded，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimaryKey</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PrimaryKey primaryKey;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@EmbeddedId</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrimaryKey</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> primaryKey; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryKey</span><span class="params">(PrimaryKey primaryKey)</span> </span>&#123; <span class="keyword">this</span>.primaryKey = primaryKey; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h3><p>Id注解用于表示主键属性，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"AutoInc"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"AutoInc"</span>, strategy = <span class="string">"native"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="@GeneratedValue"></a>@GeneratedValue</h3><p>GeneratedValue注解用于表示主键属性，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">// strategy表示默认主键生成方法，generator表示自定义主键生成器（默认为空，无需设定）</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO, generator=<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为strategy属性值可选内容：</p><ul><li>GenerationType.AUTO：主键由程序生成</li><li>GenerationType.IDENTITY：主键由数据库自增字段生成</li><li>GenerationType.SEQUENCE：主键为序列中最大值加一</li><li>GenerationType.TABLE：主键为新建表中最大值加一</li></ul><h3 id="GenericGenerator"><a href="#GenericGenerator" class="headerlink" title="@GenericGenerator"></a>@GenericGenerator</h3><p>由于GeneratedValue取值不够灵活<br>GenericGenerator注解用于定义自定义主键生成器，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"AutoInc"</span>, strategy = <span class="string">"native"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"AutoInc"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>Column注解用于表示属性对应列，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"column_introduce"</span>, length = <span class="number">100</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIntroduce</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> introduce; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntroduce</span><span class="params">(String introduce)</span> </span>&#123; <span class="keyword">this</span>.introduce = introduce; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JoinColumn"><a href="#JoinColumn" class="headerlink" title="@JoinColumn"></a>@JoinColumn</h3><p>JoinColumn注解用于表示应用某种关系而加入主表的列，常与@OneToOne、@OneToMany、@ManyToOne、@ManyToMany注解一同使用</p><h3 id="JoinTable"><a href="#JoinTable" class="headerlink" title="@JoinTable"></a>@JoinTable</h3><p>JoinTable注解用于表示应用某种关系而加入的中间（关系）表，常与@JoinColumn、@ManyToMany注解一同使用</p><h3 id="OneToOne"><a href="#OneToOne" class="headerlink" title="@OneToOne"></a>@OneToOne</h3><p>OneToOne注解用于表示一对一关系，如学生信息表对身份证表，分以下两种情况：</p><ol><li><p>默认身份证类不存储对应学生对象，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_identify"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Identify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Identify</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCardId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cardId; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardId</span><span class="params">(String cardId)</span> </span>&#123; <span class="keyword">this</span>.cardId = cardId; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Identify identify;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="comment">//cascade表示进行关联操作的时机</span></span><br><span class="line">    <span class="comment">//分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade = CascadeTtype.ALL)</span><br><span class="line">    <span class="comment">//加入主表tb_student的外键列</span></span><br><span class="line">    <span class="comment">//name表示列名</span></span><br><span class="line">    <span class="comment">//referencedColumnName表示对应外表列名</span></span><br><span class="line">    <span class="comment">//unique表示是否唯一，由于一对一关系不包含重复内容，故设置为true</span></span><br><span class="line">    <span class="meta">@JoinColum</span>(name = <span class="string">"cardId"</span>, referencedColumnName = <span class="string">"cardId"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Identify <span class="title">getIdentify</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> identify; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdentify</span><span class="params">(Identify identify)</span> </span>&#123; <span class="keyword">this</span>.identify = identify; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此时数据库中，主表 <code>tb_student</code> 将添加 <code>cardId</code> 列作为外键关联于表 <code>tb_identify</code> 的 <code>cardId</code> 列<br> <img src="https://img.vim-cn.com/3a/f003b6d56b305f945f3cfe916c7a6d264902b4.png" alt="数据库表图"></p></li><li><p><strong>不改变数据库表</strong>使身份证类存储对应学生对象，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_identify"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Identify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line">    <span class="keyword">private</span> TbStudentEntity student;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Identify</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCardId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cardId; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardId</span><span class="params">(String cardId)</span> </span>&#123; <span class="keyword">this</span>.cardId = cardId; &#125;</span><br><span class="line">    <span class="comment">//mappedBy表示该属性为被控属性，内容由TbStudentEntity对象的getIdentify()方法控制，tb_identify表并不包含此列</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(mappedBy = <span class="string">"identify"</span>)</span><br><span class="line">    <span class="meta">@JoinColum</span>(name = <span class="string">"cardId"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbStudentEntity <span class="title">getStudent</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> student; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(TbStudentEntity student)</span> </span>&#123; <span class="keyword">this</span>.student = student; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Identify identify;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="comment">//cascade表示进行关联操作的时机</span></span><br><span class="line">    <span class="comment">//分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade = CascadeTtype.ALL)</span><br><span class="line">    <span class="comment">//加入主表tb_student的外键列</span></span><br><span class="line">    <span class="comment">//name表示列名</span></span><br><span class="line">    <span class="comment">//referencedColumnName表示对应外表列名</span></span><br><span class="line">    <span class="comment">//unique表示是否唯一，由于一对一关系不包含重复内容，故设置为true</span></span><br><span class="line">    <span class="meta">@JoinColum</span>(name = <span class="string">"cardId"</span>, referencedColumnName = <span class="string">"cardId"</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Identify <span class="title">getIdentify</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> identify; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdentify</span><span class="params">(Identify identify)</span> </span>&#123; <span class="keyword">this</span>.identify = identify; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此时数据库中，主表 <code>tb_student</code> 将添加 <code>cardId</code> 列作为外键关联于表 <code>tb_identify</code> 的 <code>cardId</code> 列<br> <img src="https://img.vim-cn.com/3a/f003b6d56b305f945f3cfe916c7a6d264902b4.png" alt="数据库表图"></p></li></ol><h3 id="OneToMany"><a href="#OneToMany" class="headerlink" title="@OneToMany"></a>@OneToMany</h3><p>OneToMany注解用于表示一对多关系，如教室表对学生信息表，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_classroom"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> roomId;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassRoom</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRoomId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> roomId; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoomId</span><span class="params">(<span class="keyword">int</span> roomId)</span> </span>&#123; <span class="keyword">this</span>.roomId = roomId; &#125;</span><br><span class="line">    <span class="comment">//cascade表示进行关联操作的时机</span></span><br><span class="line">    <span class="comment">//分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作</span></span><br><span class="line">    <span class="comment">//fetch表示进行关联加载的态度</span></span><br><span class="line">    <span class="comment">//分为eager、lazy两种取值，eager即积极态度立即进行关联加载，lazy即懒散态度用时进行关联加载</span></span><br><span class="line">    <span class="comment">//此处读取学生集合需大量查询故选择lazy</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeTtype.ALL, fetch = FetchType.LAZY)</span><br><span class="line">    <span class="comment">//加入主表tb_student的外键列</span></span><br><span class="line">    <span class="comment">//name表示列名</span></span><br><span class="line">    <span class="comment">//referencedColumnName表示对应外表列名</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"crId"</span>, referencedColumnName = <span class="string">"roomId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Student&gt; <span class="title">getStduents</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> students; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStduents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123; <span class="keyword">this</span>.students = students; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>此时数据库中，主表 `tb_student` 将添加 `crId` 列作为外键关联于表 `tb_classroom` 的 `roomId` 列![数据库表图](https://img.vim-cn.com/e7/ac6932a41a10bc21e451063cb10db9fdefa210.png)</code></pre><h3 id="ManyToOne"><a href="#ManyToOne" class="headerlink" title="@ManyToOne"></a>@ManyToOne</h3><p>ManyToOne注解用于表示多对一关系，如学生信息表对教室表，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_classroom"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> roomId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassRoom</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRoomId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> roomId; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoomId</span><span class="params">(<span class="keyword">int</span> roomId)</span> </span>&#123; <span class="keyword">this</span>.roomId = roomId; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> ClassRoom room;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="comment">//cascade表示进行关联操作的时机</span></span><br><span class="line">    <span class="comment">//分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作</span></span><br><span class="line">    <span class="comment">//fetch表示进行关联加载的态度</span></span><br><span class="line">    <span class="comment">//分为eager、lazy两种取值，eager即积极态度立即进行关联加载，lazy即懒散态度用时进行关联加载</span></span><br><span class="line">    <span class="comment">//此处读取教室号无需大量查询故选择eager</span></span><br><span class="line">    <span class="meta">@ManyToOne</span>(cascade = CascadeTtype.ALL, fetch = FetchType.EAGER)</span><br><span class="line">    <span class="comment">//加入主表tb_student的外键列</span></span><br><span class="line">    <span class="comment">//name表示列名</span></span><br><span class="line">    <span class="comment">//referencedColumnName表示对应外表列名</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"crId"</span>, referencedColumnName = <span class="string">"roomId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassRoom <span class="title">getRoom</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.room; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoom</span><span class="params">(ClassRoom room)</span> </span>&#123; <span class="keyword">this</span>.room = room; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>此时数据库中，主表 `tb_student` 将添加 `crId` 列作为外键关联于表 `tb_classroom` 的 `roomId` 列![数据库表图](https://img.vim-cn.com/e7/ac6932a41a10bc21e451063cb10db9fdefa210.png)</code></pre><h3 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="@ManyToMany"></a>@ManyToMany</h3><p>ManyToMany注解用于表示多对多关系，如学生信息表对教师表，分以下两种情况：</p><ol><li><p>默认在数据库中添加学生为主的中间（关系）表使学生类存储对应教师对象集合，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_teacher"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTeacherId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> teacherId; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacherId</span><span class="params">(String teacherId)</span> </span>&#123; <span class="keyword">this</span>.teacherId = teacherId; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Teacher&gt; teachers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="comment">//cascade表示进行关联操作的时机</span></span><br><span class="line">    <span class="comment">//分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = CascadeTtype.ALL)</span><br><span class="line">    <span class="comment">//加入的中间（关系）表</span></span><br><span class="line">    <span class="comment">//name表示表名</span></span><br><span class="line">    <span class="comment">//joinColumns表示主键对应外表列集合</span></span><br><span class="line">    <span class="comment">//inverseJoinColumns表示非主键对应外表列集合</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">        name = <span class="string">"students_teachers"</span>,</span><br><span class="line">        joinColumns = &#123;<span class="meta">@JoinColum</span>(name = <span class="string">"sid"</span>, referencedColumnName = <span class="string">"id"</span>)&#125;,</span><br><span class="line">        inverseJoinColumns = &#123;<span class="meta">@JoinColum</span>(name = <span class="string">"tid"</span>, referencedColumnName = <span class="string">"teacherId"</span>)&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Teacher&gt; <span class="title">getTeachers</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> teachers; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeachers</span><span class="params">(Set&lt;Teacher&gt; teachers)</span> </span>&#123; <span class="keyword">this</span>.teachers = teachers; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此时数据库中，中间（关系）表 <code>students_teachers</code> 将添加 <code>sid</code> 列作为外键关联于表 <code>tb_student</code> 的 <code>id</code> 列和 <code>teacherId</code> 列作为外键关联于表 <code>tb_teacher</code> 的 <code>teacherId</code> 列<br> <img src="https://img.vim-cn.com/7a/2fdb2aea6e63ead5e731a23a153869f739810d.png" alt="数据库表图"></p></li><li><p><strong>不添加数据库教师为主的中间（关系）表</strong>使教师类存储对应学生对象集合，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_teacher"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> teacherId;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;TbStudentEntity&gt; students;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTeacherId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> teacherId; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacherId</span><span class="params">(String teacherId)</span> </span>&#123; <span class="keyword">this</span>.teacherId = teacherId; &#125;</span><br><span class="line">    <span class="comment">//mappedBy表示该属性为被控属性，内容由TbStudentEntity对象的getTeachers()方法控制，并不创建中间（关系）表</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"teachers"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;TbStudentEntity&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> students; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;TbStudentEntity&gt; students)</span> </span>&#123; <span class="keyword">this</span>.students = students; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Teacher&gt; teachers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="comment">//cascade表示进行关联操作的时机</span></span><br><span class="line">    <span class="comment">//分为none、save-update、delete、all四种取值，none为默认值，即不进行关联操作，save-update即save/update时进行关联操作，delete即delete时进行关联操作，all即save/update/delete时进行关联操作</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = CascadeTtype.ALL)</span><br><span class="line">    <span class="comment">//加入的中间（关系）表</span></span><br><span class="line">    <span class="comment">//name表示表名</span></span><br><span class="line">    <span class="comment">//joinColumns表示主键对应外表列集合</span></span><br><span class="line">    <span class="comment">//inverseJoinColumns表示非主键对应外表列集合</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">        name = <span class="string">"students_teachers"</span>,</span><br><span class="line">        joinColumns = &#123;<span class="meta">@JoinColum</span>(name = <span class="string">"sid"</span>, referencedColumnName = <span class="string">"id"</span>)&#125;,</span><br><span class="line">        inverseJoinColumns = &#123;<span class="meta">@JoinColum</span>(name = <span class="string">"tid"</span>, referencedColumnName = <span class="string">"teacherId"</span>)&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Teacher&gt; <span class="title">getTeachers</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> teachers; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeachers</span><span class="params">(Set&lt;Teacher&gt; teachers)</span> </span>&#123; <span class="keyword">this</span>.teachers = teachers; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此时数据库中，中间（关系）表 <code>students_teachers</code> 将添加 <code>sid</code> 列作为外键关联于表 <code>tb_student</code> 的 <code>id</code> 列和 <code>teacherId</code> 列作为外键关联于表 <code>tb_teacher</code> 的 <code>teacherId</code> 列<br> <img src="https://img.vim-cn.com/7a/2fdb2aea6e63ead5e731a23a153869f739810d.png" alt="数据库表图"></p></li></ol><h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>本文将创建 <code>TbStudentEntity</code> 类作为JavaBrean</p><h3 id="使用映射数据表"><a href="#使用映射数据表" class="headerlink" title="使用映射数据表"></a>使用映射数据表</h3><ol><li><p>创建 <code>TbStudentEntity</code> 类，实现默认构造函数，以及get、set方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123; <span class="keyword">this</span>.sex = sex; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getBirthday</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> birthday; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(LocalDate birthday)</span> </span>&#123; <span class="keyword">this</span>.birthday = birthday; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123; <span class="keyword">this</span>.address = address; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        TbStudentEntity that = (TbStudentEntity) o;</span><br><span class="line">        <span class="keyword">return</span> id == that.id &amp;&amp;</span><br><span class="line">                Objects.equals(name, that.name) &amp;&amp;</span><br><span class="line">                Objects.equals(sex, that.sex) &amp;&amp;</span><br><span class="line">                Objects.equals(birthday, that.birthday) &amp;&amp;</span><br><span class="line">                Objects.equals(address, that.address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, sex, birthday, address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同时，在 <code>hibernate.cfg.xml</code> 文件中写入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!--载入映射数据表，设置resource属性值为映射数据表文件路径--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"package/TbStudentEntity.hbm.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>随后在 <code>TbStudentEntity</code> 类同级文件夹内创建 <code>TbStudentEntity.hbm.xml</code> 映射数据表文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding='UTF-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"pacakge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"TbStudentEntity"</span> <span class="attr">table</span>=<span class="string">"tb_student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>  <span class="attr">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"ssex"</span>  <span class="attr">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"sage"</span>  <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"sbirthday"</span>  <span class="attr">type</span>=<span class="string">"java.lang.LocalDate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"saddress"</span>  <span class="attr">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>XML文件手动编写并不方便，需用工具生成。所以<strong>Hibernate提供注解方式（注解属于JPA标准），无需编写HBM。本文建议使用注解</strong>，步骤如下：</p><ol><li><p>创建 <code>TbStudentEntity</code> 类，实现默认构造函数，以及get、set方法，并加上注解，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_student"</span>, schema = <span class="string">"hibernate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TbStudentEntity</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"AutoInc"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"AutoInc"</span>, strategy = <span class="string">"native"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123; <span class="keyword">this</span>.sex = sex; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getBirthday</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> birthday; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(LocalDate birthday)</span> </span>&#123; <span class="keyword">this</span>.birthday = birthday; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123; <span class="keyword">this</span>.address = address; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        TbStudentEntity that = (TbStudentEntity) o;</span><br><span class="line">        <span class="keyword">return</span> id == that.id &amp;&amp;</span><br><span class="line">                Objects.equals(name, that.name) &amp;&amp;</span><br><span class="line">                Objects.equals(sex, that.sex) &amp;&amp;</span><br><span class="line">                Objects.equals(birthday, that.birthday) &amp;&amp;</span><br><span class="line">                Objects.equals(address, that.address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, sex, birthday, address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同时，在 <code>hibernate.cfg.xml</code> 文件中写入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!--载入映射数据表，设置class属性值为映射数据表类路径--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"package.TbStudentEntity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><h3 id="session-createQuery"><a href="#session-createQuery" class="headerlink" title="session.createQuery()"></a>session.createQuery()</h3><p>该方法传入HQL语句，返回 <code>Query</code> 对象，HQL具体语法此处不再累赘<br>调用 <code>Query</code> 对象的 <code>list()</code> 方法返回对应模型类对象链表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query query = session.createQuery(<span class="string">"from TbStudentEntity where id = ?"</span>);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">List&lt;TbStudentEntity&gt; students = query.list();</span><br></pre></td></tr></table></figure></p><h3 id="session-get"><a href="#session-get" class="headerlink" title="session.get()"></a>session.get()</h3><p>该方法传入模型类与主键，返回对应模型类对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TbStudentEntity tbStudentEntity = session.get(tbStudentEntity.class, <span class="number">1</span>);</span><br><span class="line">System.out.println(tbStudentEntity.getClass());</span><br></pre></td></tr></table></figure></p><h3 id="session-load"><a href="#session-load" class="headerlink" title="session.load()"></a>session.load()</h3><p>该方法传入模型类与主键，返回对应模型代理类的对象，取值时才对数据库进行查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TbStudentEntity tbStudentEntity = session.load(tbStudentEntity.class, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//取值之前对象类为TbStudentEntity_$$_Javassist_0代理类</span></span><br><span class="line">System.out.println(tbStudentEntity.getClass().getName());</span><br><span class="line">System.out.println(tbStudentEntity.name);</span><br><span class="line"><span class="comment">//取值之后对象类为TbStudentEntity模型类</span></span><br><span class="line">System.out.println(tbStudentEntity.getClass().getName());</span><br></pre></td></tr></table></figure></p><h3 id="session-save"><a href="#session-save" class="headerlink" title="session.save()"></a>session.save()</h3><p>该方法传入模型对象，并自动保存关联对象数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TbStudentEntity tbStudentEntity = <span class="keyword">new</span> TbStudentEntity(<span class="string">"小明"</span>, <span class="string">"男"</span>, LocalDate.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">8</span>), <span class="string">"光明小区"</span>);</span><br><span class="line">session.save(tbStudentEntity);</span><br></pre></td></tr></table></figure></p><h3 id="session-delete"><a href="#session-delete" class="headerlink" title="session.delete()"></a>session.delete()</h3><p>该方法传入模型对象，删除数据库中对应数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TbStudentEntity tbStudentEntity = <span class="keyword">new</span> TbStudentEntity(<span class="string">"小明"</span>, <span class="string">"男"</span>, LocalDate.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">8</span>), <span class="string">"光明小区"</span>);</span><br><span class="line">session.delete(tbStudentEntity);</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，Hibernate框架基本使用方法掌握。</p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> 框架 </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开源协议总结</title>
      <link href="/2018/04/06/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/06/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="https://img.vim-cn.com/c5/07eabfceb868787fd5734274dcd2471f98c08c.png" alt="一图读懂各种开源协议"><br>在项目文件夹中创建相应LICENSE文件，并拷贝协议内容即可。</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH框架-初识Struts2</title>
      <link href="/2018/04/05/SSH%E6%A1%86%E6%9E%B6-%E5%88%9D%E8%AF%86Struts2/"/>
      <url>/2018/04/05/SSH%E6%A1%86%E6%9E%B6-%E5%88%9D%E8%AF%86Struts2/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最初的Java Web开发由 <code>JavaBean + JSP</code> 模式实现，大量逻辑视图代码混杂于JSP中，造成代码可维护性极差。<br>而后Sun公司推出典型MVC模式，将逻辑与视图代码分离出来。</p><h1 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h1><p>MVC是一种软件设计典范，将软件设计分为三大部分：(Model)模型 + (View)视图 + (Controller)控制器。以此组织代码，方便维护和修改。<br>Sun公司推出的MVC实现方式为 <code>JavaBean + JSP + Servlet</code>，迅速推进Java Web开发变革。而后各大MVC模式实现方式层出不穷，为达成统一，MVC框架由此而生。Struts便是其中流行的一种。</p><h1 id="Struts简史"><a href="#Struts简史" class="headerlink" title="Struts简史"></a>Struts简史</h1><p>Struts项目隶属Apache基金会，出身名门。Struts前身为Struts1，于2001年推出，随即风靡全球。Struts1运行流程图：<br><img src="https://img.vim-cn.com/f2/2da693e2d7e66ad49525dd3ec6a978516f0d4d.png" alt="Struts1运行流程"></p><p>WebWork也是同时代产物，由于技术发展飞快，Struts项目开发组织舍弃陈旧的Struts1模式转而于2007年设计出基于WebWork的全新Struts2框架。Struts1基于Servlet API的控制器设计导致与JSP/Servlet耦合非常紧密，造成很多缺陷，而WebWork采用过滤器(filter)实现，取消对Servlet API的依赖使测试更加方便。Struts2便是WebWork的升级版。在了解Struts2之前本文将先阐述过滤器(filter)。</p><h1 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器(filter)"></a>过滤器(filter)</h1><p>Filter技术是Servlet技术中最激动人心的技术之一，开发人员通过Filter技术，对web服务器的web资源进行拦截，从而实现一些如权限控制、过滤词汇、压缩信息等特殊功能。在一个web应用中，可编写多个Filter，这些Filter组合起来称之为一个Filter链。当调用FilterChain对象的doFilter方法时，web服务器会检查FilterChain对象中是否还有filter，若有则调用第下个filter，否则调用实现servlet接口对象的service方法。Filter工作原理如下所示：<br><img src="https://img.vim-cn.com/f5/075c2251151bcf39f5458e05903a0580737b58.png" alt="Filter工作原理"></p><h1 id="Struts2原理"><a href="#Struts2原理" class="headerlink" title="Struts2原理"></a>Struts2原理</h1><p><strong>Struts2基于过滤器(filter)实现</strong>，其工作原理如下：<br><img src="https://img.vim-cn.com/b1/d3fd5f785317235e1e1adc389b82e246c9244b.png" alt="Struts2框架原理"><br>图中名词解释：</p><ul><li><strong>ActionContextCleanUp</strong>：Action属性清除过滤器，用于清除Action属性，而不用Action自行清除，以此延长Action属性（包括自定义属性）生命周期，以便在JSP页面中进行访问</li><li><strong>Other Filters(SiteMesh, etc)</strong>：其他可附加的过滤器，诸如用于响应页面修饰的SiteMesh过滤器等</li><li><strong>StrutsPrepareAndExecuteFilter</strong>：此过滤器为Struts2核心，用于调用Action映射(ActionMapper)类、设置编码格式、调用Action代理(ActionProxy)类加载配置信息；<strong>同时可拆分为StrutsPrepareFilter和StrutsExecuteFilter执行Action前（位置①）或后（位置②）的用户自定义过滤器</strong></li><li><strong>ActionMapper</strong>：Action映射类，用于匹配URL对应的Action或HTML或JSP</li><li><strong>ActionProxy</strong>：Action代理类，用于调用ConfigurationManager读取struts配置文件</li><li><strong>ConfigurationManager</strong>：配置管理类，用于读取struts相关配置文件(struts.xml、struts.properties)</li><li><strong>ActionInvocation</strong>：Action调用类，用于解析OGNL表达式和依照struts配置(struts.xml)顺序调用拦截器(Interceptor)和Action实例（Struts2使用类似Filter链的拦截器栈(Interceptor Stack)顺序调用拦截器）</li><li><strong>Interceptor (1)(2)(3)</strong>：拦截器接口，用于对Action进行过滤请求，功能类似Filter。不同于回调函数实现的Filter，拦截器基于Java反射机制实现。<strong>拦截器使用栈结构存储，注意图中调用顺序</strong></li><li><strong>Action</strong>：Action实例，用于进行模型(Model)与页面(View)链接的逻辑操作，也可包含模型对象，故不能简单视其为控制器(Controller)</li><li><strong>Result</strong>：Action执行方法的返回结果，实际为字符串，如：success、input、error等</li><li><strong>Template</strong>：显示模板，用于响应页面显示，如JSP、FreeMarker、HTML等</li></ul><h1 id="Struts2使用"><a href="#Struts2使用" class="headerlink" title="Struts2使用"></a>Struts2使用</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>创建Java Web项目并导入与Struts2相关的Jar开发包。<a href="https://struts.apache.org/download.cgi" target="_blank" rel="noopener">开发包下载地址</a></li><li><p>配置web.xml，加入Struts2核心过滤器(filter)，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在src文件夹内创建struts.xml文件，该文件用于配置全局属性、Interceptor以及action</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h2><h3 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h3><p>constant标签用于配置全局属性，如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--该属性指定需要Struts2处理的请求后缀，该属性的默认值是action,即所有匹配*.action或无后缀的请求都由Struts2处理。多个请求后缀之间以英文逗号(,)隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action,"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>可也置于struts.properties文件中，以键值对形式保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struts.action.extension=action,</span><br></pre></td></tr></table></figure></p><p>更多属性请查阅Struts2官网</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>package标签表示独立模块，每个package都有独立的interceptor、action定义<br>其属性abstract用于创建抽象package，namespace用于路径匹配（相当于文件夹路径），extends用于继承配置，例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--namespace对应http://host:port/project/path1/*.action中的path1，默认为"/"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--exends表示该包继承于框架提供的名为struts-default默认配置包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"example-package"</span> <span class="attr">namespace</span>=<span class="string">"/path1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--actions...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>关于URL中 <code>namespace</code> 路径的访问并非严格匹配，而是层级向上查找。</strong>例如：<br>当仅有单个package且其 <code>namespace=path1</code> 时，对于路径：</p><ul><li><a href="http://host:port/project/path1/example.action" target="_blank" rel="noopener">http://host:port/project/path1/example.action</a></li><li><a href="http://host:port/project/path1/path2/example.action" target="_blank" rel="noopener">http://host:port/project/path1/path2/example.action</a></li><li><a href="http://host:port/project/path1/path2/path3/example.action" target="_blank" rel="noopener">http://host:port/project/path1/path2/path3/example.action</a></li></ul><p>均可访问到example.action对应页面。</p><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>action标签用于定义URL名字对应的action类，例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此标签表示http://host:port/project/index.action网址对应HelloWorldAction类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>name属性支持正则匹配，因此可对其作些文章：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此设置表示形如http://host:port/project/Example.action网址对应ExampleAction类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">class</span>=<span class="string">"com.example.project.&#123;1&#125;Action"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--子标签也支持读取&#123;1&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>设定method属性值，可指定调用对应名称的方法，如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将调用HelloWorldAction类中自定义的hello()方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">method</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><p>result标签用于指定action方法返回值对应跳转页面（跳转默认采用forward方式，即type=”dispatcher”），例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当HelloWorldAction类某方法返回success则响应hello.jsp页面--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性name默认值为success--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因为struts.xml支持OGNL表达式，故可取request、session、application等属性值：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取request范围中名为attrExample的属性值作为JSP文件名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/&#123;#request.attrExample&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以下为Struts2已默认包含的name属性值：</p><ul><li>SUCCESS：Action正确的执行完成，返回相应的视图，success是name属性的默认值。</li><li>NONE：表示Action正确的执行完成，但并不返回任何视图。</li><li>ERROR：表示Action执行失败，返回到错误处理视图。</li><li>INPUT：Action的执行，需要从前端界面获取参数，INPUT就是代表这个参数输入的界面，一般在应用中，会对这些参数进行验证，如果验证没有通过，将自动返回到该视图。</li><li>LOGIN：Action因为用户没有登陆的原因没有正确执行，将返回该登陆视图，要求用户进行登陆验证。</li></ul><p>以下为type属性值可选内容：</p><ul><li>dispatcher：默认结果类型，用来呈现JSP页面</li><li>chain：将action和另外一个action链接起来</li><li>freemarker：呈现Freemarker模板</li><li>httpheader：返回一个已配置好的HTTP头信息响应</li><li>redirect：将用户重定向到一个已配置好的URL</li><li>redirectAction：将用户重定向到一个已定义好的action</li><li>stream：将原始数据作为流传递回浏览器端，该结果类型对下载的内容和图片非常有用</li><li>velocity：呈现Velocity模板</li><li>xslt：呈现XML到浏览器，该XML可以通过XSL模板进行转换</li><li>plaintext：返回普通文本类容</li></ul><h3 id="default-action-ref"><a href="#default-action-ref" class="headerlink" title="default-action-ref"></a>default-action-ref</h3><p>default-action-ref标签用于指定默认action处理，常用于404页面友好设计，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"default"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">class</span>=<span class="string">"com.example.project.DefaultAction"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h3><p>interceptor标签用于拦截action请求响应，例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此标签表示创建名为myInterceptor的拦截器对应MyInterceptor类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.example.project.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--interceptor-stack标签表示自定义拦截器栈，由于使用自定义interceptor将覆盖默认拦截器栈(defaultStack)，故需重新显式引入（注意栈顺序）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myInterceptorStack"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置此action使用的拦截器（栈）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptorStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="default-interceptor-ref"><a href="#default-interceptor-ref" class="headerlink" title="default-interceptor-ref"></a>default-interceptor-ref</h3><p>default-interceptor-ref标签用于指定默认拦截器（栈）</p><h3 id="global-results"><a href="#global-results" class="headerlink" title="global-results"></a>global-results</h3><p>global-results标签用于全局结果集设置，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一个全局结果集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"default-result"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="创建action"><a href="#创建action" class="headerlink" title="创建action"></a>创建action</h2><h3 id="action响应页面展示"><a href="#action响应页面展示" class="headerlink" title="action响应页面展示"></a>action响应页面展示</h3><p>本文将创建 <code>HelloWorldAciton</code> 类继承于 <code>ActionSupport</code>，实现其 <code>execute()</code> 方法（类似 <code>Servlet</code> 接口中 <code>service()</code> 方法）</p><ol><li><p>创建 <code>HelloWorldAciton</code> 类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorldAction execute."</span>);</span><br><span class="line">        <span class="keyword">return</span> ActionSupport.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同时，在 <code>struts.xml</code> 文件中写入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"example-package"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>随后在web文件夹中创建名为 <code>hello.jsp</code> 的JSP页面。</p></li></ol><p>至此，您已成功创建action并投入运行。<strong>并且action中并无显示内容相关代码，仅通过返回字符串决定响应页面，这便是MVC优势所在。</strong></p><h3 id="action读取表单参数"><a href="#action读取表单参数" class="headerlink" title="action读取表单参数"></a>action读取表单参数</h3><p>接下来，继续实现表单提交功能：</p><ol><li><p>实现Model，此处使用User类作为JavaBean，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>action</code> 中实现 <code>ModelDriven</code> 接口绑定Model，此处Model为 <code>User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//此处一定要先实例化，否则Struts2框架调用getModel方法的返回值为null</span></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ActionSupport.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>login.jsp</code> 页面中实现表单提交功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        用户名：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        密码：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>现在，访问 <code>login.jsp</code> 即可实现表单提交功能。</p><h3 id="action内容验证"><a href="#action内容验证" class="headerlink" title="action内容验证"></a>action内容验证</h3><p>最后实现表单内容验证功能：</p><ol><li><p>实现 <code>ActionSupport</code> 基类的 <code>validate()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == user.getName() || user.getName().equals(<span class="string">""</span>))</span><br><span class="line">        <span class="comment">// 当addFieldError之后action调用返回值自动变更为 `input`</span></span><br><span class="line">        <span class="keyword">this</span>.addFieldError(<span class="string">"username"</span>, <span class="string">"用户名不能为空"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>strtuts.xml</code> 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"example-package"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>login.jsp</code> 页面代码，实现错误信息读取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:fielderror</span> <span class="attr">fieldName</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        用户名：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        密码：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="action访问Servlet-API"><a href="#action访问Servlet-API" class="headerlink" title="action访问Servlet API"></a>action访问Servlet API</h3><p>访问Servlet API，只需实现 <code>ServletContextAware</code> 、 <code>ServletRequestAware</code> 、 <code>ServletResponseAware</code> 接口即可。<br>以下代码实现 <code>ServletRequestAware</code> 接口的 <code>setServletRequest</code> 方法设置request属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">"path"</span>, <span class="string">"HelloWorld"</span>);</span><br><span class="line">        <span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = httpServletRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结合 <code>struts.xml</code> 文件中 <code>result</code> 标签的OGNL表达式内容，即可实现动态跳转。</p><h2 id="创建interceptor"><a href="#创建interceptor" class="headerlink" title="创建interceptor"></a>创建interceptor</h2><p>本文将创建 <code>MyInterceptor</code> 类继承于 <code>Interceptor</code>，实现其 <code>intercept()</code> 方法（类似 <code>Filter</code> 接口中 <code>doFilter()</code> 方法）</p><ol><li><p>创建 <code>MyInterceptor</code> 类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">extends</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入拦截器"</span>);</span><br><span class="line">        String returnName = actionInvocation.invoke();</span><br><span class="line">        System.out.println(<span class="string">"走出拦截器"</span>);</span><br><span class="line">        <span class="keyword">return</span> returnName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同时，在 <code>struts.xml</code> 文件中写入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"example-package"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.example.project.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myInterceptorStack"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"com.example.project.HelloWorldAction"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptorStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>另有针对性极强的方法拦截器，实现该拦截器需继承 <code>MethodFilterInterceptor</code> 接口的 <code>doIntercept()</code> 方法，不再累述。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>Q: 配置 <code>web.xml</code> 中的 <code>welcome-file</code> 为action对应URL时并未生效？<br>A: <code>web.xml</code> 配置文件由servlet容器(tomcat)读取，<code>tomcat</code> 启动 <code>main</code> 函数生成 <code>Bootstrap</code> 实例，随即执行 <code>init()</code> 初始化，并调用 <code>start()</code> 方法。<br><code>init()</code> 方法里初始化classloader，由此创建 <code>Catalina</code> 实例。<code>Bootstrap</code> 的 <code>start()</code> 方法调用 <code>Catalina</code> 实例相应 <code>load(args)</code> 方法创建 <code>Server</code> 对象。<br><code>Service</code> 对象调用 <code>init</code> 和 <code>start</code> 方法启动 <code>Container</code> (即 <code>Engine</code> 、 <code>Host</code> 、 <code>Context</code> 、 <code>Wrapper</code> 接口的各个实现类)。<br>其中 <code>Context</code> 接口的实现类 <code>StandardContext</code> 在 <code>bindThread()</code> 后触发CONFIGURE_START_EVENT事件， <code>ContextConfig</code> 接收事件后调用 <code>configureStart()</code> 方法。<br>之后调用 <code>webConfig()</code> 方法，进入 <code>WebXmlParser</code> 实例的 <code>parseWebXml()</code> 方法，通过 <code>Digester</code> 和 <code>WebRuleSet</code> 实例解析 <code>web.xml</code> ，再进入 <code>configureContext(webXml)</code> 方法将 <code>welcome-file</code> 标签内容通过 <code>StandardContext</code> 实例的 <code>addWelcomeFile(string)</code> 方法添加其中。<br>在URL请求时按照流程 <code>EndPoint -&gt; Processor -&gt; CoyoteAdapter -&gt; Mapper</code> 进行处理，Mapper根据以下匹配次序进行URL和wrapper容器（容器中包含Servlet，即Servlet）的匹配，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">internalMapWrapper</span><span class="params">(ContextVersion contextVersion, CharChunk path, MappingData mappingData)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pathOffset = path.getOffset();</span><br><span class="line">    <span class="keyword">int</span> pathEnd = path.getEnd();</span><br><span class="line">    <span class="keyword">boolean</span> noServletPath = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> length = contextVersion.path.length();</span><br><span class="line">    <span class="keyword">if</span> (length == (pathEnd - pathOffset)) &#123;</span><br><span class="line">        noServletPath = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> servletPath = pathOffset + length;</span><br><span class="line">    path.setOffset(servletPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rule 1 -- Exact Match</span></span><br><span class="line">    MappedWrapper[] exactWrappers = contextVersion.exactWrappers;</span><br><span class="line">    internalMapExactWrapper(exactWrappers, path, mappingData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rule 2 -- Prefix Match</span></span><br><span class="line">    <span class="keyword">boolean</span> checkJspWelcomeFiles = <span class="keyword">false</span>;</span><br><span class="line">    MappedWrapper[] wildcardWrappers = contextVersion.wildcardWrappers;</span><br><span class="line">    <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        internalMapWildcardWrapper(wildcardWrappers, contextVersion.nesting, path, mappingData);</span><br><span class="line">        <span class="keyword">if</span> (mappingData.wrapper != <span class="keyword">null</span> &amp;&amp; mappingData.jspWildCard) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] buf = path.getBuffer();</span><br><span class="line">            <span class="keyword">if</span> (buf[pathEnd - <span class="number">1</span>] == <span class="string">'/'</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Path ending in '/' was mapped to JSP servlet based on</span></span><br><span class="line"><span class="comment">                * wildcard match (e.g., as specified in url-pattern of a</span></span><br><span class="line"><span class="comment">                * jsp-property-group.</span></span><br><span class="line"><span class="comment">                * Force the context's welcome files, which are interpreted</span></span><br><span class="line"><span class="comment">                * as JSP files (since they match the url-pattern), to be</span></span><br><span class="line"><span class="comment">                * considered. See Bugzilla 27664.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                mappingData.wrapper = <span class="keyword">null</span>;</span><br><span class="line">                checkJspWelcomeFiles = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// See Bugzilla 27704</span></span><br><span class="line">                mappingData.wrapperPath.setChars(buf, path.getStart(), path.getLength());</span><br><span class="line">                mappingData.pathInfo.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mappingData.wrapper == <span class="keyword">null</span> &amp;&amp; noServletPath &amp;&amp; contextVersion.object.getMapperContextRootRedirectEnabled()) &#123;</span><br><span class="line">        <span class="comment">// The path is empty, redirect to "/"</span></span><br><span class="line">        path.append(<span class="string">'/'</span>);</span><br><span class="line">        pathEnd = path.getEnd();</span><br><span class="line">        mappingData.redirectPath.setChars(path.getBuffer(), pathOffset, pathEnd - pathOffset);</span><br><span class="line">        path.setEnd(pathEnd - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rule 3 -- Extension Match</span></span><br><span class="line">    MappedWrapper[] extensionWrappers = contextVersion.extensionWrappers;</span><br><span class="line">    <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span> &amp;&amp; !checkJspWelcomeFiles) &#123;</span><br><span class="line">        internalMapExtensionWrapper(extensionWrappers, path, mappingData, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rule 4 -- Welcome resources processing for servlets</span></span><br><span class="line">    <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> checkWelcomeFiles = checkJspWelcomeFiles;</span><br><span class="line">        <span class="keyword">if</span> (!checkWelcomeFiles) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] buf = path.getBuffer();</span><br><span class="line">            checkWelcomeFiles = (buf[pathEnd - <span class="number">1</span>] == <span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkWelcomeFiles) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (i &lt; contextVersion.welcomeResources.length) &amp;&amp; (mappingData.wrapper == <span class="keyword">null</span>); i++) &#123;</span><br><span class="line">                path.setOffset(pathOffset);</span><br><span class="line">                path.setEnd(pathEnd);</span><br><span class="line">                path.append(contextVersion.welcomeResources[i], <span class="number">0</span>, contextVersion.welcomeResources[i].length());</span><br><span class="line">                path.setOffset(servletPath);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Rule 4a -- Welcome resources processing for exact macth</span></span><br><span class="line">                internalMapExactWrapper(exactWrappers, path, mappingData);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Rule 4b -- Welcome resources processing for prefix match</span></span><br><span class="line">                <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    internalMapWildcardWrapper(wildcardWrappers, contextVersion.nesting, path, mappingData);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Rule 4c -- Welcome resources processing for physical folder</span></span><br><span class="line">                <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span> &amp;&amp; contextVersion.resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String pathStr = path.toString();</span><br><span class="line">                    WebResource file = contextVersion.resources.getResource(pathStr);</span><br><span class="line">                    <span class="keyword">if</span> (file != <span class="keyword">null</span> &amp;&amp; file.isFile()) &#123;</span><br><span class="line">                        internalMapExtensionWrapper(extensionWrappers, path, mappingData, <span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span> &amp;&amp; contextVersion.defaultWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mappingData.wrapper = contextVersion.defaultWrapper.object;</span><br><span class="line">                            mappingData.requestPath.setChars(path.getBuffer(), path.getStart(), path.getLength());</span><br><span class="line">                            mappingData.wrapperPath.setChars(path.getBuffer(), path.getStart(), path.getLength());</span><br><span class="line">                            mappingData.requestPath.setString(pathStr);</span><br><span class="line">                            mappingData.wrapperPath.setString(pathStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            path.setOffset(servletPath);</span><br><span class="line">            path.setEnd(pathEnd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* welcome file processing - take 2</span></span><br><span class="line"><span class="comment">    * Now that we have looked for welcome files with a physical</span></span><br><span class="line"><span class="comment">    * backing, now look for an extension mapping listed</span></span><br><span class="line"><span class="comment">    * but may not have a physical backing to it. This is for</span></span><br><span class="line"><span class="comment">    * the case of index.jsf, index.do, etc.</span></span><br><span class="line"><span class="comment">    * A watered down version of rule 4</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> checkWelcomeFiles = checkJspWelcomeFiles;</span><br><span class="line">        <span class="keyword">if</span> (!checkWelcomeFiles) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] buf = path.getBuffer();</span><br><span class="line">            checkWelcomeFiles = (buf[pathEnd - <span class="number">1</span>] == <span class="string">'/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkWelcomeFiles) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (i &lt; contextVersion.welcomeResources.length) &amp;&amp; (mappingData.wrapper == <span class="keyword">null</span>); i++) &#123;</span><br><span class="line">                path.setOffset(pathOffset);</span><br><span class="line">                path.setEnd(pathEnd);</span><br><span class="line">                path.append(contextVersion.welcomeResources[i], <span class="number">0</span>, contextVersion.welcomeResources[i].length());</span><br><span class="line">                path.setOffset(servletPath);</span><br><span class="line">                internalMapExtensionWrapper(extensionWrappers, path, mappingData, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            path.setOffset(servletPath);</span><br><span class="line">            path.setEnd(pathEnd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rule 7 -- Default servlet</span></span><br><span class="line">    <span class="keyword">if</span> (mappingData.wrapper == <span class="keyword">null</span> &amp;&amp; !checkJspWelcomeFiles) &#123;</span><br><span class="line">        <span class="keyword">if</span> (contextVersion.defaultWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mappingData.wrapper = contextVersion.defaultWrapper.object;</span><br><span class="line">            mappingData.requestPath.setChars(path.getBuffer(), path.getStart(), path.getLength());</span><br><span class="line">            mappingData.wrapperPath.setChars(path.getBuffer(), path.getStart(), path.getLength());</span><br><span class="line">            mappingData.matchType = MappingMatch.DEFAULT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Redirection to a folder</span></span><br><span class="line">        <span class="keyword">char</span>[] buf = path.getBuffer();</span><br><span class="line">        <span class="keyword">if</span> (contextVersion.resources != <span class="keyword">null</span> &amp;&amp; buf[pathEnd -<span class="number">1</span> ] != <span class="string">'/'</span>) &#123;</span><br><span class="line">            String pathStr = path.toString();</span><br><span class="line">            WebResource file;</span><br><span class="line">            <span class="comment">// Handle context root</span></span><br><span class="line">            <span class="keyword">if</span> (pathStr.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                file = contextVersion.resources.getResource(<span class="string">"/"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                file = contextVersion.resources.getResource(pathStr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="keyword">null</span> &amp;&amp; file.isDirectory() &amp;&amp; contextVersion.object.getMapperDirectoryRedirectEnabled()) &#123;</span><br><span class="line">                <span class="comment">// Note: this mutates the path: do not do any processing</span></span><br><span class="line">                <span class="comment">// after this (since we set the redirectPath, there</span></span><br><span class="line">                <span class="comment">// shouldn't be any)</span></span><br><span class="line">                path.setOffset(pathOffset);</span><br><span class="line">                path.append(<span class="string">'/'</span>);</span><br><span class="line">                mappingData.redirectPath.setChars(path.getBuffer(), path.getStart(), path.getLength());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mappingData.requestPath.setString(pathStr);</span><br><span class="line">                mappingData.wrapperPath.setString(pathStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path.setOffset(pathOffset);</span><br><span class="line">    path.setEnd(pathEnd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>精确匹配(Exact Match)</li><li>前缀匹配(Prefix Match)</li><li>后缀匹配(Extension Match)</li><li>加入欢迎页面地址匹配(Welcome resources processing for servlets)<br> 4.1. 欢迎页面精确匹配(Welcome resources processing for exact macth)<br> 4.2. 欢迎页面前缀匹配(Welcome resources processing for prefix match)<br> 4.3. 欢迎页面静态文件匹配(Welcome resources processing for physical folder)<br> 4.4. 欢迎页面后缀匹配(welcome file processing - take 2)</li><li>默认Servlet路径“/”匹配(Default servlet)</li></ol><p>进入 <code>Mapper</code> 时由于首次启动访问主页URL为 <code>http://host:port/project/</code> 以“/”结尾，故步骤1、2、3均匹配失败。<br>进入步骤4，请求URL变为 <code>http://host:port/project/*.action</code> 。<br>然而 <code>wrapper容器</code> 仅支持查找 <code>Servlet</code> ，故步骤4.1、4.2均失败，由于未创建文件 <code>*.action</code> 故步骤4.3依旧失败。<br><code>wrapper容器</code> 仅支持查找 <code>Servlet</code> ，同理步骤4.4也失败。<br>URL重新退化为 <code>http://host:port/project/</code> 进入步骤7成功匹配，传给过滤器(filter)处理，进入Struts2框架。<br>Struts2框架无法匹配此URL对应action，故主页设置未生效。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，Struts2框架基本使用方法掌握。</p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> 框架 </tag>
            
            <tag> Struts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题9-用两个栈实现队列</title>
      <link href="/2018/04/02/%E5%89%91%E6%8C%87Offer-%E9%A2%989-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2018/04/02/%E5%89%91%E6%8C%87Offer-%E9%A2%989-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目：用两个栈实现队列"><a href="#题目：用两个栈实现队列" class="headerlink" title="题目：用两个栈实现队列"></a>题目：用两个栈实现队列</h1><h2 id="题目一：用两个栈实现队列"><a href="#题目一：用两个栈实现队列" class="headerlink" title="题目一：用两个栈实现队列"></a>题目一：用两个栈实现队列</h2><p>用两个栈实现一个队列。队列的声明如下：请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">CQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CQueue();</span><br><span class="line">    ~CQueue();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">const</span> T&amp; node)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">deleteHead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;T&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;T&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="题目二：用两个队列栈实现栈"><a href="#题目二：用两个队列栈实现栈" class="headerlink" title="题目二：用两个队列栈实现栈"></a>题目二：用两个队列栈实现栈</h2><p>用两个队列实现一个栈。请实现它的两个函数appendTail和deleteTail。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="解析题目一"><a href="#解析题目一" class="headerlink" title="解析题目一"></a>解析题目一</h2><p>栈：先进后出<br>堆：先进先出<br>想用栈实现堆，只能将栈倒放。好在有两个栈，可以倒序存取。故代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> CQueue&lt;T&gt;::appendTail(<span class="keyword">const</span> T&amp; node)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stack2.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        stack1.push(stack2.top());</span><br><span class="line">        stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    stack1.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T CQueue&lt;T&gt;::deleteHead()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!stack1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        stack2.push(stack1.top());</span><br><span class="line">        stack1.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    T temp = stack2.top();</span><br><span class="line">    stack2.pop();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码存在两大问题😭</p><ol><li><code>stack2.pop()</code> 未进行栈空判断</li><li>存取均拷贝栈数据，效率低下</li></ol><p>深入分析，栈结构符合存储操作，无需改动；删除操作只需改变单个栈结构，一个当堆头，一个当堆尾。如图所示<br><img src="https://img.vim-cn.com/f3/51b58d9a654bb7a95e948dea1243b1fb4da4e0.gif" alt="动画演示"><br>以下是优化后的代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> CQueue&lt;T&gt;::appendTail(<span class="keyword">const</span> T&amp; node)</span><br><span class="line">&#123;</span><br><span class="line">    stack1.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T CQueue&lt;T&gt;::deleteHead()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack2.empty())</span><br><span class="line">        <span class="keyword">while</span> (!stack1.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            stack2.push(stack1.top());</span><br><span class="line">            stack1.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack2.empty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> exception(<span class="string">"queue is empty"</span>);</span><br><span class="line">    T temp = stack2.top();</span><br><span class="line">    stack2.pop();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析题目二"><a href="#解析题目二" class="headerlink" title="解析题目二"></a>解析题目二</h2><p>堆结构符合存储操作，无需改动；删除操作需转移中执行，故两个堆轮流使用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> CStack&lt;T&gt;::appendTail(<span class="keyword">const</span> T&amp; node)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;T&gt; saveQueue = !queue1.empty() ? queue1 : queue2;</span><br><span class="line">    saveQueue.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T CStack&lt;T&gt;::deleteTail()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;T&gt; readQueue = !queue1.empty() ? queue1 : queue2;</span><br><span class="line">    <span class="built_in">queue</span>&lt;T&gt; saveQueue = queue1.empty() ? queue1 : queue2;</span><br><span class="line">    <span class="keyword">while</span> (!readQueue.size() &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveQueue.push(readQueue.top());</span><br><span class="line">        readQueue.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (saveQueue.empty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> exception(<span class="string">"stack is empty"</span>);</span><br><span class="line">    T temp = readQueue.top();</span><br><span class="line">    readQueue.pop();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题8-二叉树的下一个节点</title>
      <link href="/2018/03/30/%E5%89%91%E6%8C%87Offer-%E9%A2%988-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/2018/03/30/%E5%89%91%E6%8C%87Offer-%E9%A2%988-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目：二叉树的下一个节点"><a href="#题目：二叉树的下一个节点" class="headerlink" title="题目：二叉树的下一个节点"></a>题目：二叉树的下一个节点</h1><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>通过举例画出二叉树，分情况讨论<strong>（有序判断，不可颠倒）</strong>：</p><ul><li>给定节点含右子节点，判断给定节点右子节点<ul><li>给定节点右子节点含左子节点，取给定节点右子节点<strong>左子叶</strong></li><li>给定节点右子节点含右子节点，取给定节点右子节点</li><li>给定节点右子节点不含子节点，取给定节点右子节点</li></ul></li><li>给定节点不含右子节点，判断给定节点父节点<ul><li>给定节点为其父节点左子节点，取给定节点父节点</li><li>给定节点为其父节点右子节点，判断给定节点父节点父节点<ul><li>给定节点父节点为其父节点左子节点，取给定节点父节点父节点</li><li>给定节点父节点为其父节点右子节点，判断给定节点父节点父节点父节点<ul><li>……<strong>（循环往复，直至节点为其父节左子节点）</strong></li></ul></li></ul></li></ul></li></ul><p>根据讨论写出如下代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinaryTreeNode* <span class="title">findNext</span><span class="params">(BinaryTreeNode *pNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pNode)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    BinaryTreeNode *pNext = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (pNode-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pNext = pNode-&gt;right;</span><br><span class="line">        <span class="keyword">if</span> (pNext-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (pNext-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">                pNext = pNext-&gt;left;</span><br><span class="line">            <span class="keyword">return</span> pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pNext = pNode-&gt;root;</span><br><span class="line">        <span class="keyword">while</span> (pNext != <span class="literal">nullptr</span> &amp;&amp; pNext-&gt;right == pNode)</span><br><span class="line">        &#123;</span><br><span class="line">            pNode = pNext;</span><br><span class="line">            pNext = pNode-&gt;root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>与书中代码如出一辙😎！</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题7-重建二叉树</title>
      <link href="/2018/03/28/%E5%89%91%E6%8C%87Offer-%E9%A2%987-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/03/28/%E5%89%91%E6%8C%87Offer-%E9%A2%987-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题目：重建二叉树"><a href="#题目：重建二叉树" class="headerlink" title="题目：重建二叉树"></a>题目：重建二叉树</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历结果中都不含重复的数字。例如输入前序遍历序列 <code>{1,2,4,7,3,5,6,8}</code> 和中序遍历序列 <code>{4,7,2,1,5,3,8,6}</code> ，则重建如图二叉树并输出它的头节点。<br><img src="https://img.vim-cn.com/f7/2158fb00faee41c54508719da32403a6e66671.jpg" alt="二叉树"><br>二叉树的定义如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    BinaryTreeNode* left;</span><br><span class="line">    BinaryTreeNode* right;</span><br><span class="line">    BinaryTreeNode(<span class="keyword">int</span> x):val(x),left(<span class="literal">NULL</span>),right(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>二叉树定义：每个节点最多只能有两个子节点的树。又分为</p><ul><li>最大堆：根节点值最大</li><li>最小堆：根节点值最小</li><li>搜索树：左子节点值小于或等于根节点值，右子节点值大于或等于根节点值</li><li>红黑树：任意节点的左右子树中最长路径的长度不会超过最短路径的两倍</li></ul><p>二叉树的遍历方式分为</p><ul><li>前序遍历：根节点-&gt;左子节点-&gt;右子节点</li><li>中序遍历：左子节点-&gt;根节点-&gt;右子节点</li><li>后序遍历：左子节点-&gt;右子节点-&gt;根节点</li><li>层序遍历(广度优先遍历)：从根到叶分层，每层从左到右遍历</li></ul><p><strong>小诀窍：中序遍历可由投影法直观得出。</strong>如图所示<br><img src="https://img.vim-cn.com/54/90fa21c2cac47cab225ab59c7c883c83e1793c.png" alt="中序遍历"><br>对于题中二叉树不难得出</p><ul><li>前序遍历为 <code>10 6 4 8 14 12 16</code></li><li>中序遍历为 <code>4 6 8 10 12 14 16</code></li><li>后序遍历为 <code>4 8 6 12 16 14 10</code></li></ul><p>观察发现</p><ul><li>前序遍历顺序记录根节点信息，即根节点 <code>10</code> 先于子节点 <code>6 14</code> 遍历</li><li>中序遍历记录左右子树范围，即左子树节点 <code>4 6 8</code> 先于根节点 <code>10</code> 遍历，右子树节点 <code>12 14 16</code> 后于根节点 <code>10</code> 遍历</li><li>后序遍历倒序记录根节点信息，即根节点 <code>10</code> 后于子节点 <code>6 14</code> 遍历</li></ul><p>以前序为主，中序为辅，便可重建二叉树😎。代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinaryTreeNode* <span class="title">rebuildBinaryTree</span><span class="params">(<span class="keyword">int</span> *preOrder, <span class="keyword">int</span> *inOrder, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == preOrder || <span class="literal">nullptr</span> == inOrder || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    BinaryTreeNode *pRoot = <span class="literal">nullptr</span>;</span><br><span class="line">    BinaryTreeNode *pNode = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> != pRoot)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> leftNode = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">int</span> position = length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; ++j)</span><br><span class="line">                <span class="keyword">if</span> (inOrder[j] == pNode-&gt;val)</span><br><span class="line">                    position = j;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (inOrder[j] == preOrder[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    leftNode = j &lt; position;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (leftNode)</span><br><span class="line">            &#123;</span><br><span class="line">                pNode-&gt;left = <span class="keyword">new</span> BinaryTreeNode(preOrder[i]);</span><br><span class="line">                pNode = pNode-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pNode-&gt;right = <span class="keyword">new</span> BinaryTreeNode(preOrder[i]);</span><br><span class="line">                pNode = pNode-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pNode = pRoot = <span class="keyword">new</span> BinaryTreeNode(preOrder[i]);</span><br><span class="line">        <span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此法使用双重循环，效率甚低。可以使用map将inOrder中的数值对应下标存储，以空间换时间。<br>不过书中提供了更好的思路<strong>（分治法）：既然可得出左右子树包含数值，不妨继续对子树继续进行左右子树划分，由此可先（解决小问题）得出含叶子节点子树，继而（解决大问题）合并子树成较大子树，最终形成二叉树。</strong>下为子树分析图片<br><img src="https://img.vim-cn.com/2c/d21afdcb4b65d685e86fdfafbea3dacf104fe3.jpg" alt="子树分析图片"><br>分治法需递归实现，书中神级代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinaryTreeNode* <span class="title">rebuildBinaryTree</span><span class="params">(<span class="keyword">int</span> *preOrder, <span class="keyword">int</span> *inOrder, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == preOrder || <span class="literal">nullptr</span> == inOrder || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="comment">// 递归传入：左子树起点，左子树终点，右子树起点，右子树终点</span></span><br><span class="line">    <span class="keyword">return</span> constructCore(preOrder, preOrder + length - <span class="number">1</span>, inOrder, inOrder + length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BinaryTreeNode* <span class="title">constructCore</span><span class="params">(<span class="keyword">int</span> *startPreOrder, <span class="keyword">int</span> *endPreOrder, <span class="keyword">int</span> *startInOrder, <span class="keyword">int</span> *endInOrder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BinaryTreeNode * pRoot = <span class="keyword">new</span> BinaryTreeNode(*startPreOrder);</span><br><span class="line">    <span class="keyword">if</span> (startPreOrder == endPreOrder)</span><br><span class="line">        <span class="keyword">if</span> (startInOrder == endInOrder)</span><br><span class="line">            <span class="keyword">if</span> (*startPreOrder == *startInOrder)</span><br><span class="line">                <span class="keyword">return</span> pRoot;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">"Invalid input"</span>);</span><br><span class="line">    <span class="keyword">int</span> * rootPosition = startInOrder;</span><br><span class="line">    <span class="keyword">while</span> (*rootPosition != *startPreOrder &amp;&amp; rootPosition &lt;= endInOrder)</span><br><span class="line">        ++rootPosition;</span><br><span class="line">    <span class="keyword">if</span> (rootPosition &gt; endInOrder)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::exception(<span class="string">"Invalid input"</span>);</span><br><span class="line">    <span class="keyword">int</span> leftLength = (rootPosition - <span class="number">1</span>) - startInOrder;</span><br><span class="line">    <span class="keyword">int</span> rightLength = endInOrder - (rootPosition + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (leftLength &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 此处传参范围需参考子树分析图片</span></span><br><span class="line">        pRoot-&gt;left = constructCore(startPreOrder + <span class="number">1</span>, (startPreOrder + <span class="number">1</span>) + leftLength, startInOrder, rootPosition - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (rightLength &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 此处传参需范围参考子树分析图片</span></span><br><span class="line">        pRoot-&gt;right = constructCore((startPreOrder + <span class="number">1</span>) + leftLength + <span class="number">1</span>, endPreOrder, rootPosition + <span class="number">1</span>, endInOrder);</span><br><span class="line">    <span class="keyword">return</span> pRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题6-从尾到头打印链表</title>
      <link href="/2018/03/27/%E5%89%91%E6%8C%87Offer-%E9%A2%986-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/03/27/%E5%89%91%E6%8C%87Offer-%E9%A2%986-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="题目：从尾到头打印链表"><a href="#题目：从尾到头打印链表" class="headerlink" title="题目：从尾到头打印链表"></a>题目：从尾到头打印链表</h1><p>输入一个链表的头结点，从尾到头反过来打印每个结点的值。链表结点定义如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    ListNode* pNext;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>链表不同数组，查找某节点只能老老实实从头遍历。循环倒序遍历需要时间复杂度为O(n^2)，不可取。分如下两种情况优化：</p><ol><li><p>如果可以反转链表，遍历中调整 <code>pNext</code> 指针指向，最后遍历即可。代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printListReversely</span><span class="params">(ListNode *pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pHead)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">     ListNode *pNode = <span class="literal">nullptr</span>;</span><br><span class="line">     ListNode *pNodeNext = pHead;</span><br><span class="line">     ListNode *pTemp = <span class="literal">nullptr</span>;</span><br><span class="line">     <span class="keyword">while</span> (pNodeNext != <span class="literal">nullptr</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         pTemp = pNodeNext-&gt;pNext;</span><br><span class="line">         pNodeNext-&gt;pNext = pNode;</span><br><span class="line">         pNode = pNodeNext;</span><br><span class="line">         pNodeNext = pTemp;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span> (pNode != <span class="literal">nullptr</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pNode-&gt;value);</span><br><span class="line">         pNode = pNode-&gt;pNext;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果禁止修改链表，遍历中倒序存储节点内容，最后遍历即可。空间复杂度O(n)、时间复杂度O(n)，此举是以空间换时间。代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printListReversely</span><span class="params">(ListNode *pHead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pHead)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;ListNode*&gt; nodes;</span><br><span class="line">     ListNode *pNode = pHead;</span><br><span class="line">     <span class="keyword">while</span> (pNode != <span class="literal">nullptr</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         nodes.push(pNode);</span><br><span class="line">         pNode = pNode-&gt;pNext;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span> (!nodes.empty())</span><br><span class="line">     &#123;</span><br><span class="line">         pNode = nodes.top();</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pNode-&gt;value);</span><br><span class="line">         nodes.pop();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 打印 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题5-替换空格</title>
      <link href="/2018/03/27/%E5%89%91%E6%8C%87Offer-%E9%A2%985-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>/2018/03/27/%E5%89%91%E6%8C%87Offer-%E9%A2%985-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h1 id="题目：替换空格"><a href="#题目：替换空格" class="headerlink" title="题目：替换空格"></a>题目：替换空格</h1><h2 id="题目一：替换空格"><a href="#题目一：替换空格" class="headerlink" title="题目一：替换空格"></a>题目一：替换空格</h2><p>请实现一个函数，把原字符串中的每个空格替换成“%20”，例如输入“We are happy”,则输出“We%20are%20happy”。</p><h2 id="题目二：合并排序数组"><a href="#题目二：合并排序数组" class="headerlink" title="题目二：合并排序数组"></a>题目二：合并排序数组</h2><p>有两个排序的数组A1和A2，内存在A1的末尾有足够多的空余空间容纳A2。请实现一个函数，把A2中的所有数字插入A1中，并且所有的数字是排序的。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="解析题目一"><a href="#解析题目一" class="headerlink" title="解析题目一"></a>解析题目一</h2><p>本题考查字符串替换，且在原字符串上改动。若考虑<strong>从头至尾遍历字符串进行字符后移，则产生多次字段移动，时间复杂度为O(n^2)。</strong><br>考虑从尾至头遍历字符串进行字符后移？经书中点拨，此法甚妙😂！<strong>从尾至头仅产生一次字段移动，虽<em>须预先测量移动距离</em>，但仅遍历2n次，时间复杂度为O(n)。</strong><br>以下为本人代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> length, <span class="keyword">char</span> *aimStr, <span class="keyword">char</span> *replaceStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == str || length &lt;= <span class="number">0</span> || <span class="literal">nullptr</span> == aimStr || <span class="literal">nullptr</span> == replaceStr)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> strLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> replaceCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'\0'</span> != str[strLength++])</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span>  == <span class="built_in">strncmp</span>(&amp;str[index], aimStr, <span class="built_in">strlen</span>(aimStr)))</span><br><span class="line">            ++replaceCount;</span><br><span class="line">    <span class="keyword">int</span> strNewLength = strLength + replaceCount * (<span class="built_in">strlen</span>(replaceStr) - <span class="built_in">strlen</span>(aimStr));</span><br><span class="line">    <span class="keyword">if</span> (strNewLength &gt; length)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> index = strLength;</span><br><span class="line">    <span class="keyword">int</span> indexNew = strNewLength;</span><br><span class="line">    <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; indexNew &gt; index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(&amp;str[index], aimStr, <span class="built_in">strlen</span>(aimStr)))</span><br><span class="line">        &#123;</span><br><span class="line">            indexNew -= <span class="built_in">strlen</span>(replaceStr) - <span class="built_in">strlen</span>(aimStr);</span><br><span class="line">            <span class="comment">// strcpy将自动在尾部附加结束符\0，故采用memcpy</span></span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;str[indexNew], replaceStr, <span class="built_in">strlen</span>(replaceStr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            str[indexNew] = str[index];</span><br><span class="line">        --index;</span><br><span class="line">        --indexNew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析题目二"><a href="#解析题目二" class="headerlink" title="解析题目二"></a>解析题目二</h2><p>思路与上题相同，附上本人代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> *aimArr, <span class="keyword">int</span> aimArrLength, <span class="keyword">int</span> length, <span class="keyword">int</span> *insertArr, <span class="keyword">int</span> insertArrLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == aimArr || aimArrLength &lt;= <span class="number">0</span> || length &lt;= <span class="number">0</span> || <span class="literal">nullptr</span> == insertArr || insertArrLength &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> newLength = aimArrLength + insertArrLength;</span><br><span class="line">    <span class="keyword">if</span> (newLength &gt; length)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> indexAim = aimArrLength - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> indexInsert = insertArrLength - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> indexNew = newLength - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (indexNew &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (aimArr[indexAim] &gt; insertArr[indexInsert])</span><br><span class="line">            aimArr[indexNew--] = aimArr[indexAim--];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            aimArr[indexNew--] = insertArr[indexInsert--];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，<strong>在合并数组（包括字符串）时，应该优先考虑从后往前复制。</strong></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组 </tag>
            
            <tag> 替换 </tag>
            
            <tag> 空格 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题4-二维数组中的查找</title>
      <link href="/2018/03/26/%E5%89%91%E6%8C%87Offer-%E9%A2%984-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/03/26/%E5%89%91%E6%8C%87Offer-%E9%A2%984-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h1 id="题目：二维数组中的查找"><a href="#题目：二维数组中的查找" class="headerlink" title="题目：二维数组中的查找"></a>题目：二维数组中的查找</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>可以肯定的是直接遍历不可取🙄。之后想到跳步判断，先走斜线，若此时数值大于查找数则往左或往右倒退？往左之后该往上还是往下？继而联想到A*路径查找算法……<br>naive ! 书中指出<strong>考虑每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</strong>。问题变得困难是因为考虑数组中中间位置的数，此时该位置含有两个排序规律；不如考虑特殊位置-顶角的数呢？<br>二维数组有四个顶角，选择其中某个顶角分析。举例分析：<br>有如下二维数组，查找数字 <code>7</code><br>$$<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 8 &amp; 9 \\<br>    2 &amp; 4 &amp; 9 &amp; 12 \\<br>    4 &amp; 7 &amp; 10 &amp; 13 \\<br>    6 &amp; 8 &amp; 11 &amp; 15 \\<br>\end{bmatrix}<br>$$<br>对四个顶点分情况讨论(↓、→、↘表示增大方向)：</p><ul><li>考虑左上角则有规律：对于左上角有三个出度<br>$$<br>\begin{bmatrix}<br>  ● &amp; \rightarrow &amp; \rightarrow &amp; \rightarrow \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \rightarrow &amp; \searrow \\<br>\end{bmatrix}<br>$$</li><li>考虑右下角则有规律：对于右下角有三个入度<br>$$<br>\begin{bmatrix}<br>  ＋ &amp; \rightarrow &amp; \rightarrow &amp; \rightarrow \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \rightarrow &amp; ● \\<br>\end{bmatrix}<br>$$</li><li>考虑右上角则有规律：<strong>对于右上角有一个入度和一个出度</strong><br>$$<br>\begin{bmatrix}<br>  ＋ &amp; \rightarrow &amp; \rightarrow &amp; ● \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \rightarrow &amp; \searrow \\<br>\end{bmatrix}<br>$$</li><li>考虑左下角则有规律：<strong>对于左下角有一个入度和一个出度</strong><br>$$<br>\begin{bmatrix}<br>  ＋ &amp; \rightarrow &amp; \rightarrow &amp; \rightarrow \\<br>  \downarrow &amp; \searrow &amp; \downarrow &amp; \downarrow \\<br>  \downarrow &amp; \rightarrow &amp; \searrow &amp; \downarrow \\<br>  ● &amp; \rightarrow &amp; \rightarrow &amp; \searrow \\<br>\end{bmatrix}<br>$$</li></ul><p>“柿子要捡软的捏”，当然选一出一入的突破口啊！例如选择右上角数字 <code>9</code>，则 <code>9 &gt; 7</code> 说明第四列均大于 <code>7</code>，故判断数组范围缩小为<br>$$<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 8 \\<br>    2 &amp; 4 &amp; 9 \\<br>    4 &amp; 7 &amp; 10 \\<br>    6 &amp; 8 &amp; 11 \\<br>\end{bmatrix}<br>$$<br>继续选择右上角数字 <code>8</code>，则 <code>8 &gt; 7</code> 说明第四列均大于 <code>8</code>，故判断数组范围又缩小<br>$$<br>\begin{bmatrix}<br>    1 &amp; 2 \\<br>    2 &amp; 4 \\<br>    4 &amp; 7 \\<br>    6 &amp; 8 \\<br>\end{bmatrix}<br>$$<br>继续选择右上角数字 <code>2</code>，则 <code>2 &lt; 7</code> 说明第一行均小于 <code>8</code>，故判断数组范围双缩小<br>$$<br>\begin{bmatrix}<br>    2 &amp; 4 \\<br>    4 &amp; 7 \\<br>    6 &amp; 8 \\<br>\end{bmatrix}<br>$$<br>继续选择右上角数字 <code>4</code>，则 <code>4 &lt; 7</code> 说明第一行均小于 <code>8</code>，故判断数组范围叒缩小<br>$$<br>\begin{bmatrix}<br>    4 &amp; 7 \\<br>    6 &amp; 8 \\<br>\end{bmatrix}<br>$$<br>选择右上角数字 <code>7</code>，则寻找完毕😄。转化为代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findNumber</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns, <span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == arr || rows &lt; <span class="number">1</span> || columns &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> column = columns;</span><br><span class="line">    <span class="keyword">while</span> (row &lt;= rows &amp;&amp; column &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (arr + ((row - <span class="number">1</span>) + (column - <span class="number">1</span>) * rows) &gt; number)</span><br><span class="line">            --column;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr + ((row - <span class="number">1</span>) + (column - <span class="number">1</span>) * rows) &lt; number)</span><br><span class="line">            ++row;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组 </tag>
            
            <tag> 二维 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题3-数组中重复的数字</title>
      <link href="/2018/03/25/%E5%89%91%E6%8C%87Offer-%E9%A2%983-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2018/03/25/%E5%89%91%E6%8C%87Offer-%E9%A2%983-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目：数组中重复的数字"><a href="#题目：数组中重复的数字" class="headerlink" title="题目：数组中重复的数字"></a>题目：数组中重复的数字</h1><h2 id="题目一：找出数组中重复的数字"><a href="#题目一：找出数组中重复的数字" class="headerlink" title="题目一：找出数组中重复的数字"></a>题目一：找出数组中重复的数字</h2><p>在一个长度为n的数组里的所有数字都在0~n-1的范围内。数组中某些数字是重复的。但不知道有几个数字重复了，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p><h2 id="题目二：不修改数组找出数组中重复的数字"><a href="#题目二：不修改数组找出数组中重复的数字" class="headerlink" title="题目二：不修改数组找出数组中重复的数字"></a>题目二：不修改数组找出数组中重复的数字</h2><p>在一个长度为n+1的数组里的所有数字都在1~n的范围内。所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7}，那么对应的输出是重复的数字2或者3。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="解析题目一"><a href="#解析题目一" class="headerlink" title="解析题目一"></a>解析题目一</h2><p>数组在空间上连续且含有下标，此题考虑查找效率<br>稍加思索，决定利用下标：若数值与下标不同则与数值对应下标的数值进行置换，若置换中发现两数相同则查找结束，如此时间复杂度仅O(n)，代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i != arr[i])</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != arr[arr[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[arr[i]];</span><br><span class="line">                arr[arr[i]] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = arr[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对照书本发现思路相同，nice !😎<br>原来无意中已利用下标充当Hash Table(哈希表)的思想解决了问题<br>不过本人漏掉重要的<strong>空值检测、边界检测</strong>😭，修复代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= length || arr[i] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i != arr[i])</span><br><span class="line">            <span class="keyword">if</span> (arr[i] != arr[arr[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[arr[i]];</span><br><span class="line">                arr[arr[i]] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = arr[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原本以为完美无瑕，<strong>测试数组{0,2,0}发现无法找出重复数字</strong>。<br>究其原因<strong>对于替换数值后的数组{0,0,2}未再次判断，导致第二位 <code>0</code> 成为漏网之鱼</strong>，下为书中神级代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numbers == <span class="literal">nullptr</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt;= length || numbers[i] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="comment">// 使用while便无“漏网之0”</span></span><br><span class="line">        <span class="keyword">while</span> (i != numbers[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] != numbers[numbers[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = numbers[numbers[i]];</span><br><span class="line">                numbers[numbers[i]] = numbers[i];</span><br><span class="line">                numbers[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = numbers[i];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析题目二"><a href="#解析题目二" class="headerlink" title="解析题目二"></a>解析题目二</h2><p>禁止修改输入数组？呵！断我财路，emmmm。苦思冥想，仅想到拷贝数组套用题目一方法……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == arr || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= length || arr[i] &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> *arrTemp = <span class="keyword">new</span> <span class="keyword">int</span>[length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; ++i)</span><br><span class="line">        arrTemp[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrTemp[arr[i] - <span class="number">1</span>] == arr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            *duplication = arr[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arrTemp[arr[i] - <span class="number">1</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> arrTemp;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一筹莫展之下，阅读书中解析顿觉豁然开朗！书中指出，<strong>含重复数字范围内数字个数必大于该范围长度</strong>。例如</p><ul><li>对于长度为3的数组{1,2,2}，范围[1,1]内的数字个数为1等于范围长度1，而范围[2,2]内的数字个数为2大于范围长度1，可以确定重复数字位于范围[2,2]中即为2。</li><li>对于长度为5的数组{2,2,3,4,4}，范围[1,2]内的数字个数为2等于范围长度2，而范围[3,4]内的数字个数为3大于范围长度2，可以确定重复数字位于范围[3,4]中。继续分析范围[3,3]内的数字个数为1等于范围长度1，而范围[4,4]内的数字个数为2大于范围长度1，可以确定重复数字位于范围[4,4]中即为4。<strong>(此方法对于多个重复数字仅能找到其中之一)</strong></li></ul><p>以上两例说明只需对计数范围不断二分法，必定能找出重复数字。因此写出书中神级代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == numbers)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt;= start &amp;&amp; numbers[i] &lt;= end)</span><br><span class="line">            ++count;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span> *duplication)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == numbers || length &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt;= length || numbers[i] &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (end &gt;= start)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = ((end - start) &lt;&lt; <span class="number">1</span>) + start;</span><br><span class="line">        <span class="keyword">int</span> count = countRange(numbers, length, start, middle);</span><br><span class="line">        <span class="keyword">if</span> (end == start)</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *duplication = start;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; (middle - start + <span class="number">1</span>))</span><br><span class="line">            end = middle;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            start = middle + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于此二分查找法，countRange将被调用O(logn)次，而countRange的时间复杂度为O(n)，故总时间复杂度为O(nlogn)。空间复杂度为O(1)，这是利用时间换空间。</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组 </tag>
            
            <tag> 重复 </tag>
            
            <tag> 数字 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题2-实现单例模式</title>
      <link href="/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%982-%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%982-%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="题目：实现单例-Singleton-模式"><a href="#题目：实现单例-Singleton-模式" class="headerlink" title="题目：实现单例(Singleton)模式"></a>题目：实现单例(Singleton)模式</h1><p>设计一个类，我们只能生成该类的一个实例</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目要求明显，设计单例模式：仅生成单个实例<br>如此需要考虑一下几点：</p><ul><li>构造函数需“隐藏”，且另设方法通过静态变量判断是否创建实例充当构造函数</li><li>返回实例的方法必定使用 <code>new</code> 创建实例(否则将产生值传递生成多个单例)，故需存储静态实例指针待销毁时使用</li><li>静态变量用于存储变量创建状态，将其设为 <code>int flag</code> ？此举造成冗余，不如利用静态实例指针</li></ul><p>理清三点后奉上本人渣码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Singleton();</span><br><span class="line">    <span class="keyword">static</span> Singleton* s_pInstance;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton();</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++中仅有静态整形常量才可于类内初始化，否则导致所有实例均含该静态成员</span></span><br><span class="line">Singleton* Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Singleton::~Singleton()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != Singleton::s_pInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> Singleton::s_pInstance;</span><br><span class="line">        Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">        Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看似完美，却木有考虑多线程下同时执行 <code>if (nullptr == Singleton::s_pInstance)</code> 情况，加锁加锁……<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用window API操控锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LockBase()</span><br><span class="line">    &#123;</span><br><span class="line">        ::InitializeCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">    ~LockBase()</span><br><span class="line">    &#123;</span><br><span class="line">        ::DeleteCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ::EnterCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ::LeaveCriticalSection(&amp;cs);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CRITICAL_SECTION cs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Singleton();</span><br><span class="line">    <span class="keyword">static</span> Singleton* s_pInstance;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton();</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Singleton::~Singleton()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != Singleton::s_pInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> Singleton::s_pInstance;</span><br><span class="line">        Singleton::s_pInstance = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    LockBase lockBase;</span><br><span class="line">    lockBase.lock();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">        Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    lockBase.unlock();</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>very nice ! 😀 等等！其实这个锁的范围有点大了，我们可以再次优化，缩小范围<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">    &#123;</span><br><span class="line">        LockBase lockBase;</span><br><span class="line">        lockBase.lock();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">nullptr</span> == Singleton::s_pInstance)</span><br><span class="line">            Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        lockBase.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不但缩小范围，而且提升效率，感觉很棒棒(๑•̀ㅂ•́)و✧ 对照下书本<br>有木有搞错！结果书上说还有更加优秀的解法=_=</p><h2 id="力荐解法一：利用静态构造函数"><a href="#力荐解法一：利用静态构造函数" class="headerlink" title="力荐解法一：利用静态构造函数"></a>力荐解法一：利用静态构造函数</h2><p>静态构造函数：定义类时仅自动执行一次的函数<br>可能要让您失望了，书中使用C#，而C++没有静态构造函数！😂<br>先看看书中C#神级代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再看看 <code>C++</code> 模拟代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Singleton();</span><br><span class="line">    <span class="keyword">static</span> Singleton* s_pInstance;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Singleton();</span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::s_pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Singleton::s_pInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实是在全局域中直接设定，略显牵强😝</p><h2 id="力荐解法二：实现按需创建实例"><a href="#力荐解法二：实现按需创建实例" class="headerlink" title="力荐解法二：实现按需创建实例"></a>力荐解法二：实现按需创建实例</h2><p>解法一中过早创建实例占用内存，所以可用高级语言中 <strong>类仅在使用时载入</strong> 的特性改进代码<br>C++无法实现此方法，以下依旧是书中C#神级代码<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Nested.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Nested</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// internal表示该变量仅可在同项目内调用</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other members......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="本题扩展"><a href="#本题扩展" class="headerlink" title="本题扩展"></a>本题扩展</h1><p>实现可继承单例，派生类都只能产生一个实例<br>可以在单例类中使用指针数组判断对应子类标记是否已存在，若存在直接返回，反之创建子类，应加锁实现</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 单例 </tag>
            
            <tag> Singleton </tag>
            
            <tag> 模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题1-赋值运算符函数</title>
      <link href="/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%981-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0/"/>
      <url>/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%981-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目：赋值运算符函数"><a href="#题目：赋值运算符函数" class="headerlink" title="题目：赋值运算符函数"></a>题目：赋值运算符函数</h1><p>如下为类型CMyString的声明，请为该类型添加赋值运算符函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyString</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CMyString(<span class="keyword">char</span>* pData=<span class="literal">NULL</span>);</span><br><span class="line">    CMyString(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line">    ~CMyString(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_pData;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目考察赋值运算符(=)函数声明，对于<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="comment">// 调用赋值运算符函数</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>考虑形如 <code>a = 1</code> ，视 <code>a</code> 为 <code>int</code> 对象则代码改为 <code>a.=(1)</code>，其中 <code>=</code> 为方法名， <code>1</code> 为实参，由此构造出函数声明雏形<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值 =(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>因为 <code>printf(&quot;%d&quot;, a = 1)</code> 输出值为运算结果，故而<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> =(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>由于运算符函数特殊性，函数名加上关键词operator<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>=(<span class="keyword">int</span> num);</span><br></pre></td></tr></table></figure></p><p>考虑函数仅对实参取值，故参数可常类型(const)引用传递，修改声明<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>= (<span class="keyword">const</span> <span class="keyword">int</span>&amp; num);</span><br></pre></td></tr></table></figure></p><p>考虑以下任意一种情况</p><ul><li><code>(a = 1) = 2</code> 运行通过说明 <code>(a = 1)</code> 返回值为可修改的左值即 <code>a</code></li><li><code>cout &lt;&lt; ... &lt;&lt; ...</code> 中的运算符函数 <code>&lt;&lt;</code> 可流式编写，说明 <code>cout &lt;&lt; ...</code> 返回值为可修改左值即<code>std::out&amp;</code></li></ul><p>故返回值需引用传递，修改声明<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>= (<span class="keyword">int</span>&amp; num);</span><br></pre></td></tr></table></figure></p><p>套用进类 <code>CMyString</code><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyString</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CMyString(<span class="keyword">char</span>* pData=<span class="literal">NULL</span>);</span><br><span class="line">    CMyString(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line">    ~CMyString(<span class="keyword">void</span>);</span><br><span class="line">    CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_pData;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>顺便把定义写了(应该是”深拷贝”赋值)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    m_pData = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_pData) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_pData, str.m_pData);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对照书本发现自己还是太嫩了，没有对各个变量进行判断，安全代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(&amp;str == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] m_pData;</span><br><span class="line">    m_pData = <span class="literal">nullptr</span>;</span><br><span class="line">    m_pData = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.m_pData) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(m_pData, str.m_pData);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而，事情并没有这么简单……，书中神级代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CMyString&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;str != <span class="keyword">this</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// (代码异常安全性)将new操作置于构造函数中，可保护当前m_pData数据免受delete</span></span><br><span class="line">        CMyString strTemp(str);</span><br><span class="line">        <span class="keyword">char</span> *pTemp = strTemp.m_pData;</span><br><span class="line">        strTemp.m_pData = <span class="keyword">this</span>-&gt;m_pData;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_pData = pTemp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 赋值 </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机图形学-直线</title>
      <link href="/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B4%E7%BA%BF/"/>
      <url>/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B4%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h1 id="直线绘制算法"><a href="#直线绘制算法" class="headerlink" title="直线绘制算法"></a>直线绘制算法</h1><p><em>本文介绍内容归属计算机图形学范畴，基于二维平面直角坐标系绘制</em></p><hr><h2 id="为何研究直线绘制算法？"><a href="#为何研究直线绘制算法？" class="headerlink" title="为何研究直线绘制算法？"></a>为何研究直线绘制算法？</h2><p>现实世界绘制直线(段)只靠直尺和笔，而计算机显示图形需点亮屏幕像素点——绘点成线(段)</p><p>如同一连串英文句点绘制而成的分割线，效果如下（<em>离散化的近似表现</em>，假使放大页面会出现明显间隙）</p><p>…………………………………………………………………….</p><p>可惜直线不只是水平线，还包括斜线吖！（QAQ）</p><p>为此，图形学者致力寻找高效绘点算法 (\掌声)。我们将讨论以下三种直线绘制算法：</p><ol><li>DDA算法<ul><li>算法思想<strong>简单</strong></li><li>直线平滑性差，效率较高</li></ul></li><li>逐点比较算法（亦称插补法）<ul><li><strong>工业常用</strong>算法</li><li>直线平滑性好，效率较低</li></ul></li><li>Breseham算法<ul><li><strong>高效</strong></li><li>兼并DDA算法与插补法思想</li></ul></li></ol><h2 id="DDA（DIgital-differential-analyzer）算法"><a href="#DDA（DIgital-differential-analyzer）算法" class="headerlink" title="DDA（DIgital differential analyzer）算法"></a>DDA（DIgital differential analyzer）算法</h2><p>聪明的数学家早将直线用数学公式表示出来 <strong>y = k · x + b</strong></p><p>求解两个未知量 <code>k、b</code> 我们只需y知晓两组点数据即可（两点绘制一条直线），那么我们就用线段的起点和终点代入公式吧。（^_^）</p><p><code>起点p0(0, 0) 终点p6(6, 4) -&gt; k = 1.5，b = 0</code>。观察发现当 <code>x2 = x1 + 1</code> 时，<code>y2 = y1 + k</code></p><p>计算机像素单位长度为1（即像素点数据均为整数），我们凑巧将 y2 取整成 y2’ 即得需点亮像素点位置 <code>(x2, y2&#39;)</code></p><p>依此类推，<code>x3 = x2 + 1，y3 = y2 + k，y3&#39; = 取整y3</code> ……</p><p>大功告成？哦不！我们还能优化一下效率</p><ul><li><p>当直线斜率 <code>k &lt; 1</code> 时，我们以x为主，采用 <code>x2 = x1 + 1</code> 的步进方式，加快水平方向延伸速度</p></li><li><p>当直线斜率 <code>k &gt; 1</code> 时，我们以y为主，采用 <code>y2 = y1 + 1</code> 的步进方式，加快垂直方向延伸速度</p></li></ul><p><strong><em>取整步骤需要对小数四舍五入，对效率略有影响</em></strong></p><p>最终代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用openGL的glut库</span></span><br><span class="line"><span class="comment">#include &lt;gl\glut.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="comment">x1 = 0，y1 = 0</span></span><br><span class="line"><span class="comment">x2 = 6，y2 = 4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLineDDA</span><span class="params">(GLint x1, GLint y1, GLint x2, GLint y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//置颜色为红</span></span><br><span class="line"><span class="keyword">int</span> dx = x2 - x1;</span><br><span class="line"><span class="keyword">int</span> dy = y2 - y1;</span><br><span class="line">dx = <span class="built_in">abs</span>(dx);</span><br><span class="line">dy = <span class="built_in">abs</span>(dy);</span><br><span class="line"><span class="keyword">int</span> step = dx &gt; dy ? dx : dy;<span class="comment">//判断k与1的关系，若dx大，水平方向延伸为主；若dy大，垂直方向延伸为主</span></span><br><span class="line"><span class="keyword">double</span> xin = dx / step;<span class="comment">//x轴步长</span></span><br><span class="line"><span class="keyword">double</span> yin = dy / (<span class="keyword">double</span>)step;<span class="comment">//y轴步长</span></span><br><span class="line"><span class="keyword">double</span> x = x1;</span><br><span class="line"><span class="keyword">double</span> y = y1;</span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= step; i++)</span><br><span class="line">&#123;</span><br><span class="line">glVertex2f(x / <span class="number">10.0</span>, <span class="keyword">int</span>(y + <span class="number">0.5</span>) / <span class="number">10.0</span>);<span class="comment">//int(y + 0.5)将y值四舍五入，绘于标准化坐标系，故除以10.0</span></span><br><span class="line">x = x + xin;</span><br><span class="line">y = y + yin;</span><br><span class="line">&#125;</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/DDA.PNG" alt="DDA算法效果图"></p><h2 id="逐点比较算法（插补法）"><a href="#逐点比较算法（插补法）" class="headerlink" title="逐点比较算法（插补法）"></a>逐点比较算法（插补法）</h2><p>此算法以像素点为主，<strong>第一象限</strong>前提下考虑<strong>右方向</strong>和<strong>上方向</strong>像素点与直线位置，二选一点亮</p><p>同样取 <code>起点p0(0, 0) 终点pn(6, 4)</code> 代入公式 <strong>y = k · x + b</strong> 得 <code>k = 1.5，b = 0</code></p><p>当像素点 <code>p</code> 在直线上方时 <code>yp / xp &gt; (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp &gt; 0</code></p><p>当像素点 <code>p</code> 在直线中时 <code>yp / xp = (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp = 0</code></p><p>当像素点 <code>p</code> 在直线下方时 <code>yp / xp &lt; (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp &lt; 0</code></p><p>把 <code>yp * (x6 - x0) - (y6 - y0) * xp</code> 记为 <code>F</code> 则 <code>F = yp * (x6 - x0) - (y6 - y0) * xp</code> 即为偏差公式，且起点偏差应为 <code>F0 = 0</code></p><ol><li><p>当 <code>F &gt; 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p></li><li><p>当 <code>F = 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）或 <code>y2 = y1 + 1</code>（即点亮上方像素点）</p></li><li><p>当 <code>F &lt; 0</code> 时，<code>y2 = y1 + 1</code>（即点亮上方像素点）</p></li></ol><p>但逐次求解含有乘法的偏差公式严重影响效率<del>有木有啊</del>，简化为下式（当 <code>F = 0</code> 时取 <code>x2 = x1 + 1</code>）</p><ul><li><p>当 <code>F1 &gt;= 0</code> 时 <code>F2 = yp * (x6 - x0) - (y6 - y0) * (xp + 1) = F1 - (y6 - y0)</code></p></li><li><p>当 <code>F1 &lt; 0</code> 时 <code>F2 = (yp + 1) * (x6 - x0) - (y6 - y0) * xp = F1 + (x6 - x0)</code></p></li></ul><p><strong><em>因为可能点亮上方像素点，意味同一y值下不只点亮一点像素，故效率较低</em></strong></p><p>同理可得第二象限、第三象限、第四象限求法，请读者自行计算，不再赘述（偷个懒 \滑稽）</p><p>最终代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用openGL的glut库</span></span><br><span class="line"><span class="comment">#include &lt;gl\glut.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLineInsert</span><span class="params">(GLint x1, GLint y1, GLint x2, GLint y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//置颜色为红</span></span><br><span class="line"><span class="keyword">int</span> dx = x2 - x1;</span><br><span class="line"><span class="keyword">int</span> dy = y2 - y1;</span><br><span class="line"><span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> x = x1;</span><br><span class="line"><span class="keyword">double</span> y = y1;</span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line"><span class="keyword">while</span> (x &lt; x2 + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">glVertex2f(x / <span class="number">10.0</span>, y / <span class="number">10.0</span>);<span class="comment">//绘制于标准化坐标系，故除以10.0</span></span><br><span class="line"><span class="keyword">if</span> (f &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line">f = f - dy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">y = y + <span class="number">1</span>;</span><br><span class="line">f = f + dx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/Insert.PNG" alt="插补法效果图"></p><h2 id="Bresenham算法"><a href="#Bresenham算法" class="headerlink" title="Bresenham算法"></a>Bresenham算法</h2><p>此算法基于DDA算法进行逐点比较改进而来，同逐点比较法以像素点为主，考虑<strong>右方向</strong>和<strong>右上方向</strong>像素点与直线位置，二选一点亮</p><p>无耻地盗个图</p><p><img src="https://camo.githubusercontent.com/c5669fe7d006c897cf652afa9a06f9ed9e773553/68747470733a2f2f696d6773612e62616964752e636f6d2f6261696b652f63302533446261696b6538302532433525324335253243383025324332362f7369676e3d36326235313930343938353034666332623635326238353738346234386337342f643031333733663038323032356161666539393465626337663865646162363430333466316131332e6a7067" alt="Bresenham原理图"></p><p>同样取 <code>起点p0(0, 0) 终点p6(6, 4)</code> 代入公式 <strong>y = k · x + b</strong> 得 <code>k = 1.5，b = 0</code></p><p>存在规律 <code>y2 = y1 + k</code>，若 <code>y1</code> 偏上则点亮右上方像素点，若 <code>y2</code> 偏下则点亮右方像素点，即比较交点 <code>y2</code> 与像素间距中点位置</p><p>记 <code>d = (y2 - y1) / (x2 - x1) + (y2 - y1) / (x2 - x1) - └ (y2 - y1) / (x2 - x1) + (y1 - y0) / (x1 - x0) ┘</code> ，（<code>└x┘</code> 表示取下整，如 <code>└1.2┘ = 1</code>；减去取下整值是为保证 <code>d ∈ [0, 1]</code>）则</p><p>当 <code>d &gt; 0.5</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）</p><p>当 <code>d = 0.5</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）或 <code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>当 <code>d &lt; 0.5</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>进一步设 <code>e = d - 0.5</code> 则</p><p>当 <code>e &gt; 0</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）</p><p>当 <code>e = 0</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）或 <code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>当 <code>e &lt; 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>至此算法演变为判断 <code>e</code> 的正负号，既然如此我们可将算式转为整数加减形式避免除法提高效率</p><p><em>`e = (2d - 1) </em> (x2 - x1) <em> …… </em> (x1 - x0) = 2 <em> (y2 - y1) </em> …… <em> (x1 - x0) + …… + (y1 - y0) </em> …… <em> (x2 - x1) - 2 </em> └ (y2 - y1) / (x2 - x1) + …… + (y1 - y0) / (x1 - x0) ┘ <em> (x2 - x1) </em> …… <em> (x1 - x0)  - 2 </em> └ …… + (y1 - y0) / (x1 - x0) ┘ <em> (x2 - x1) </em> …… <em> (x1 - x0) - (x2 - x1) </em> …… <em> (x1 - x0)`</em></p><p>好家伙，劳资还是坚持打粗来了（= =）</p><p>看似有规律，采取数学归纳法</p><p>记 <code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - 2 * └ (y1 - y0) / (x1 - x0) ┘ * (x1 - x0) - (x1 - x0)</code></p><p>记 <code>e2 = (2d2 - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - 2 * └ (y2 - y1) / (x2 - x1) + (y1 - y0) / (x1 - x0) ┘ * (x2 - x1) * (x1 - x0) - 2 * └ (y1 - y0) / (x1 - x0) ┘ * (x2 - x1) * (x1 - x0) - (x2 - x1) * (x1 - x0)</code></p><p>取下整采用分情况讨论（当 <code>d = 0.5</code> 时，<code>x2 = x1 + 1</code>）</p><p>当 <code>d2 &lt; 1</code> 时</p><p><code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - (x1 - x0)</code></p><p><code>e2 = (2d2 - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - (x2 - x1) * (x1 - x0)</code></p><p>即</p><p><code>e2 = e1 * (x2 - x1) + 2 * (y2 - y1) * (x1 - x0)</code></p><p>当 <code>d2 &gt; 1</code> 或 <code>d2 = 1</code> 时</p><p><code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - (x1 - x0)</code></p><p><code>e2 = (2(d2 - 1) - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - (x2 - x1) * (x1 - x0) - 2 * (x2 - x1) * (x1 - x0)</code></p><p>即</p><p><code>e2 = e1 * (x2 - x1) + 2 * (y2 - y1) * (x1 - x0) - 2 * (x2 - x1) * (x1 - x0)</code></p><p>大可利用编程语言 <code>d = d + k</code> 特性，且 <code>dx = (x2 - x1) = 1，dy = (y2 - y1) = k</code> 为固定值</p><p>当 <code>d &lt; 1</code> 即 <code>d - 0.5 &lt; 1 - 0.5 -&gt; 2 * (d - 0.5) &lt; 1</code> -&gt; <code>2 * (d - 0.5) * dx &lt; dx</code> -&gt; <code>e &lt; dx</code> 时</p><p><code>e = e * dx + 2 * dy * dx</code></p><p>当 <code>d &gt; 1</code> 或 <code>d = 1</code> 同理即 <code>e &gt; dx</code> 或 <code>e = dx</code> 时</p><p><code>e = e * dx + 2 * dy * dx - 2 * dx * dx</code></p><p><strong><code>e</code> 初始值为 <code>e0 = 2 * (0 - 0.5) * (x1 - x0) = -(x1 - x0) = -dx</code></strong></p><p><strong>当 <code>e &gt; dx</code> 时，<code>e = e + 2 * dy * dx - 2 * dx * dx</code>（即点亮右上方像素点）</strong></p><p><strong>当 <code>e = dx</code> 时，<code>e = e + 2 * dy * dx - 2 * dx * dx</code>（即点亮右上方像素点）</strong></p><p><strong>当 <code>e &lt; dx</code> 时，<code>e = e - 2 * dx * dx</code>（即点亮右方像素点）</strong></p><p><strong><em>同一y值下仅点亮一点像素，且计算过程均为加减法 (上式乘数固定值)，适用各象限无需分类，高效快捷</em></strong></p><p>最终代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">使用openGL的glut库</span></span><br><span class="line"><span class="comment">#include &lt;gl\glut.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;math.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLineBresenham</span><span class="params">(GLint x1, GLint y1, GLint x2, GLint y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);<span class="comment">//置颜色为红</span></span><br><span class="line"><span class="keyword">int</span> dx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> dy = (y2 - y1) / (<span class="keyword">double</span>)(x2 - x1);</span><br><span class="line"><span class="keyword">double</span> e = -dx;</span><br><span class="line"><span class="keyword">double</span> x = x1;</span><br><span class="line"><span class="keyword">double</span> y = y1;</span><br><span class="line">glBegin(GL_POINTS);</span><br><span class="line"><span class="keyword">while</span> (x &lt; x2 + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">glVertex2f(x / <span class="number">10.0</span>, y / <span class="number">10.0</span>);<span class="comment">//绘制于标准化坐标系，故除以10.0</span></span><br><span class="line">x++;</span><br><span class="line">e = e + <span class="number">2</span> * dy * dx;<span class="comment">//可换为单一变量无需多次做乘法</span></span><br><span class="line"><span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line">e = e - <span class="number">2</span> * dx * dx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/Bresenham.PNG" alt="Bresenham算法效果图"></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><em><a href="http://baike.baidu.com/item/DDA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">DDA算法_百度百科</a></em></p><p><em><a href="https://wenku.baidu.com/view/7df948146c175f0e7cd1377f.html" target="_blank" rel="noopener">逐点比较法直线插补</a></em></p><p><em><a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" target="_blank" rel="noopener">Bresenham’s line algorithm - Wikipedia</a></em></p><p><em><a href="http://www.360doc.com/content/13/1220/09/11400509_338596444.shtml" target="_blank" rel="noopener">Bresenham直线算法与画圆算法</a></em></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 直线 </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法总结(上)</title>
      <link href="/2018/03/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93(%E4%B8%8A)/"/>
      <url>/2018/03/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93(%E4%B8%8A)/</url>
      <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><hr><h2 id="What’s-Algorithm"><a href="#What’s-Algorithm" class="headerlink" title="What’s Algorithm ?"></a>What’s Algorithm ?</h2><p>提及“<strong>算法</strong>”，小白面对高大上说词仰慕之心油然而生 @o@</p><p>然而，算法并不神秘 = =</p><p>顾名思义，<strong>计算方法</strong>简称算法（什，什，什，什么！这么简单？→_→）</p><p>举个栗子：</p><blockquote><p>从小学就接触的乘法：对 n+n+n+…+n 的简写就是一种算法（递推法<a href="递推法即是把一个复杂的庞大的计算过程转化为简单过程的多次重复">^A</a>）,<br>算法注定要有输入与输出：算式中的 n 即为输入，乘积即为输出。</p></blockquote><p>注：</p><ul><li>算法中的状态变化是不确定的</li><li>算法必定能在执行有限个步骤之后终止</li><li>某些算法加入随机输入，称为随机化算法</li></ul><h2 id="How-to-Assess-Algorithm"><a href="#How-to-Assess-Algorithm" class="headerlink" title="How to Assess Algorithm ?"></a>How to Assess Algorithm ?</h2><p>对算法的评定分析主要从<strong>时间复杂度</strong>(所耗时间长短)与<strong>空间复杂度</strong>(空间开支大小)来考虑。</p><p>关于复杂度的计算需要引入如下渐近记号：</p><blockquote><p><em>大O记号：</em></p><blockquote><p><em>O(g(n)) = { f(n) : 存在正常数c和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= f(n) &lt;= cg(n) }</em></p></blockquote></blockquote><blockquote><p><em>大Ω记号：</em></p><blockquote><p><em>Ω(g(n)) = { f(n) : 存在正常数c和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= cg(n) &lt;= f(n) }</em></p></blockquote></blockquote><blockquote><p><em>大Θ记号：</em></p><blockquote><p><em>Θ(g(n)) = { f(n) : 存在正常数c1和c2和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= c1g(n) &lt;= f(n) &lt;= c2g(n) }</em></p></blockquote></blockquote><p><em>数学证明资料：<a href="http://www.cnblogs.com/zabery/archive/2011/07/19/2110994.html" target="_blank" rel="noopener">计算机算法分析之渐进记号</a></em></p><p>具体计算方式将于实例中给出 ～(~▽~)～</p><h2 id="DIY-Algorithm-！"><a href="#DIY-Algorithm-！" class="headerlink" title="DIY Algorithm ！"></a>DIY Algorithm ！</h2><p>以下给出排序算法C++代码：</p><p>1.冒泡排序（Bubble Sort）<a href="冒泡排序的思想是让最大的数浮动到数组最后的位置，其次大的数浮动到数组倒数第二个位置，依次推类">^B</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>时间复杂度分析：</p><p>考虑最坏情况–将逆序数列变为顺序（此情况下，每一次比较都需要进行交换运算） T_T</p><blockquote><p>再举个栗子：<strong>数列 5 4 3 2 1 进行冒泡升序排列</strong><br>第一次外层循环从第一个数5开始到倒数第二个数2结束，<br>共进行4次比较交换运算，5移到末尾。<br>第二次外层循环从第一个数4开始到倒数第三个数2结束。<br>共进行3次比较交换运算，4移到倒数第二个数。<br>……<br>依次推类，总比较次数为 4 + 3 + 2 + 1 = 10 次</p></blockquote><p>证明：</p><p>根据数学归纳法,对于n位的数列则有比较次数为<code>(n-1) + (n-2) + ... + 1 = n \* (n - 1) / 2 = (n^2 - n) / 2</code></p><p>如图<img src="http://images.51cto.com/files/uploadimg/20110826/211021569.jpg" alt="比较次数"></p><p>若n = 10000，则<code>(n^2 - n) / 2 = (100000000 - 10000) / 2</code></p><p>相对 100000000 来说 10000 微乎其微，故总计算次数约为<code>0.5 \* N^2</code></p><p>用O(N^2)就表示了其数量级（忽略前面系数0.5）</p><p>得 <strong>冒泡排序的时间复杂度为O(N^2)</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序改进版：若遍历中得知数组有序则结束排序</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改进算法后，对于一个有序数组完成一次外层循环后就会结束，共发生 N - 1 次比较，故升级版冒泡排序在最优情况下的时间复杂度为O(N)</p><p>2.插入排序(Insert Sort)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp;j--)</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>资料：<a href="http://baidu.ku6.com/watch/05586300336858352205.html" target="_blank" rel="noopener">插入排序舞蹈</a></em></p><p>3.*归并排序（Merge Sort）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &lt; last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">mergeSort(arr,temp,start,mid);</span><br><span class="line">mergeSort(arr,temp,mid + <span class="number">1</span>,last);</span><br><span class="line">arrUnion(arr,temp,start,mid,last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrUnion</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">i = start;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line">k = start;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span> &amp;&amp; j != last + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[j])</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">while</span>(j != last + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line"><span class="keyword">for</span>(i = start;i &lt; last + <span class="number">1</span>;i++)</span><br><span class="line">arr[i] = temp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>资料：<a href="http://visualgo.net/sorting" target="_blank" rel="noopener">排序动画演示</a></em></p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison ."></a>Comparison .</h2><p>下面我们通过这段C语言代码比较排序速度，直观感受时间复杂度。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSortRand</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortPlus</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choseSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start, end;</span><br><span class="line">    <span class="keyword">int</span> a[N], b[N], c[N], d[N], e[N], f[N], g[N];</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = rand()%<span class="number">100</span> + rand()%<span class="number">1000</span>;</span><br><span class="line">        <span class="comment">//g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = N - i;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line">    quickSortRand(a,<span class="number">0</span>,N - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"随机快速排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(a,N);</span></span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line">    quickSort(b,<span class="number">0</span>,N - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"快速排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(b,N);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* temp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</span><br><span class="line">    start = clock();</span><br><span class="line">    mergeSort(c,temp,<span class="number">0</span>,N - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"归并排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(c,N);</span></span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    insertSort(d,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"插入排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(d,N);</span></span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    bubbleSort(e,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"冒泡排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(e,N);</span></span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    bubbleSortPlus(f,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"升级版冒泡排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(f,N);</span></span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line">    choseSort(g,N);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"选择排序用时%lfsec\n"</span>,(<span class="keyword">double</span>)(end - start) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="comment">//printArr(g,N);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &lt; last)</span><br><span class="line">&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">int</span> i = start;</span><br><span class="line"><span class="keyword">int</span> j = last;</span><br><span class="line"><span class="keyword">while</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= arr[start] &amp;&amp; j != i)</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= arr[start] &amp;&amp; i != j)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[start];</span><br><span class="line">arr[start] = temp;</span><br><span class="line">quickSort(arr, start, i - <span class="number">1</span>);</span><br><span class="line">quickSort(arr, i + <span class="number">1</span>, last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSortRand</span><span class="params">(T arr[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &lt; last)</span><br><span class="line">&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">int</span> i = start;</span><br><span class="line"><span class="keyword">int</span> j = last;</span><br><span class="line"><span class="keyword">int</span> pos = rand() % (last - start) + start;</span><br><span class="line">temp = arr[start];</span><br><span class="line">arr[start] = arr[pos];</span><br><span class="line">arr[pos] = temp;</span><br><span class="line"><span class="keyword">while</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= arr[start] &amp;&amp; j != i)</span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= arr[start] &amp;&amp; i != j)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i != j)</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[start];</span><br><span class="line">arr[start] = temp;</span><br><span class="line">quickSortRand(arr, start, i - <span class="number">1</span>);</span><br><span class="line">quickSortRand(arr, i + <span class="number">1</span>, last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[],T temp[],<span class="keyword">int</span> start,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr,temp,start,mid);</span><br><span class="line">        mergeSort(arr,temp,mid + <span class="number">1</span>,last);</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">i = start;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line">k = start;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span> &amp;&amp; j != last + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[j])</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i != mid + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">while</span>(j != last + <span class="number">1</span>)</span><br><span class="line">temp[k++] = arr[j++];</span><br><span class="line"><span class="keyword">for</span>(i = start;i &lt; last + <span class="number">1</span>;i++)</span><br><span class="line">arr[i] = temp[i];</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; arr[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp;j--)</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSortPlus</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    T temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span> &amp;&amp; flag;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choseSort</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; n;j++)</span><br><span class="line"><span class="keyword">if</span>(arr[i] &gt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行条件：</p><p><strong>编译程序VC 6.0</strong></p><p><strong>数组成员 5000</strong></p><p>执行结果：</p><p><strong>随机快速排序用时0.001000sec</strong></p><p><strong>快速排序用时0.001000sec</strong></p><p><strong>归并排序用时0.002000sec</strong></p><p><strong>插入排序用时0.033000sec</strong></p><p><strong>冒泡排序用时0.090000sec</strong></p><p><strong>升级版冒泡排序用时0.089000sec</strong></p><p><strong>选择排序用时0.083000sec</strong></p><p>下面我们通过这段JAVA语言代码比较排序速度，直观感受时间复杂度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">package</span> pers.cz.sortcompare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> pers.cz.sortcompare.Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> n = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] d = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] e = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">long</span> start, end;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = rand.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.QuickSort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"QuickSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(a);</span></span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.QuickSortRand(b, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"QuickSortRand cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(b);</span></span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Sort.MargeSort(c, <span class="number">0</span>, n - <span class="number">1</span>, temp);</span><br><span class="line">        temp = <span class="keyword">null</span>;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"MargeSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(c);</span></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.InsertSort(d);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"InstertSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(d);</span></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.BubbleSortPlus(e);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"BubbleSortPlus cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(e);</span></span><br><span class="line"></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.BubbleSort(f);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"BubbleSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(f);</span></span><br><span class="line">        </span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Sort.ChoseSort(g);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.print(<span class="string">"ChoseSort cost time(sec):"</span>);</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//PrintArrData(g);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArrData</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sort.java</span></span><br><span class="line"><span class="keyword">package</span> pers.cz.sortcompare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ChoseSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSortPlus</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> &amp;&amp; flag; i++) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j, number;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                number = arr[i];</span><br><span class="line">                <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; number; j--) &#123;</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + <span class="number">1</span>] = number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MargeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">            Sort.MargeSort(arr, start, mid, temp);</span><br><span class="line">            Sort.MargeSort(arr, mid + <span class="number">1</span>, last, temp);</span><br><span class="line">            <span class="keyword">int</span> i, j, k;</span><br><span class="line">            i = start;</span><br><span class="line">            j = mid + <span class="number">1</span>;</span><br><span class="line">            k = start;</span><br><span class="line">            <span class="keyword">while</span> (i != mid + <span class="number">1</span> &amp;&amp; j != last + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                    temp[k++] = arr[i++];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp[k++] = arr[j++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != mid + <span class="number">1</span>) &#123;</span><br><span class="line">                temp[k++] = arr[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (j != last + <span class="number">1</span>) &#123;</span><br><span class="line">                temp[k++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = start; i &lt; last + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                arr[i] = temp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">int</span> i = start;</span><br><span class="line">            <span class="keyword">int</span> j = last;</span><br><span class="line">            <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[j] &gt;= arr[start] &amp;&amp; j != i) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] &lt;= arr[start] &amp;&amp; i != j) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[start];</span><br><span class="line">            arr[start] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSortRand</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; last) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">int</span> i = start;</span><br><span class="line">            <span class="keyword">int</span> j = last;</span><br><span class="line">            Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> pos = rand.nextInt(last - start) + start;</span><br><span class="line">            temp = arr[start];</span><br><span class="line">            arr[start] = arr[pos];</span><br><span class="line">            arr[pos] = temp;</span><br><span class="line">            <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[j] &gt;= arr[start] &amp;&amp; j != i) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] &lt;= arr[start] &amp;&amp; i != j) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[start];</span><br><span class="line">            arr[start] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行条件：</p><p><strong>编译程序NetBeans IDE 8.1</strong></p><p><strong>数组成员 1000</strong></p><p>执行结果：</p><p><strong>QuickSort cost time(sec):1</strong></p><p><strong>QuickSortRand cost time(sec):0</strong></p><p><strong>MargeSort cost time(sec):1</strong></p><p><strong>InstertSort cost time(sec):5</strong></p><p><strong>BubbleSortPlus cost time(sec):14</strong></p><p><strong>BubbleSort cost time(sec):18</strong></p><p><strong>ChoseSort cost time(sec):9</strong></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 冒泡 </tag>
            
            <tag> 插入 </tag>
            
            <tag> 归并 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Test</title>
      <link href="/2018/03/22/Test/"/>
      <url>/2018/03/22/Test/</url>
      <content type="html"><![CDATA[<p>这是一个测试帖</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> first </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鄙人不才，小博供阅</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>QQ：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=2506649223&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener">2506649223</a></li><li>Email：<a href="mailto:cz335360@gmail.com" target="_blank" rel="noopener">cz335360@gmail.com</a></li></ul>]]></content>
    </entry>
    
  
</search>
