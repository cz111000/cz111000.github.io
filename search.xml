<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>剑指Offer-题4-二维数组中的查找</title>
      <link href="/2018/03/26/%E5%89%91%E6%8C%87Offer-%E9%A2%984-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/03/26/%E5%89%91%E6%8C%87Offer-%E9%A2%984-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h1 id="题目：二维数组中的查找"><a href="#题目：二维数组中的查找" class="headerlink" title="题目：二维数组中的查找"></a>题目：二维数组中的查找</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>可以肯定的是直接遍历不可取🙄。之后想到跳步判断，先走斜线，若此时数值大于查找数则往左或往右倒退？往左之后该往上还是往下？继而联想到A*路径查找算法……<br>naive ! 书中指出<strong>考虑每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</strong>。问题变得困难是因为考虑数组中未知位置的数，不如考虑特殊位置-顶角的数呢？<br>二维数组有四个顶角，选择其中某个顶角分析。举例分析：<br>有如下二维数组，查找数字7<br>$1$<br>$$\begin{matrix}<br>1&amp;2&amp;8&amp;9\<br>2&amp;4&amp;9&amp;12\<br>4&amp;7&amp;10&amp;13\<br>6&amp;8&amp;11&amp;15\<br>\end{matrix}$$</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 二维 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题3-数组中重复的数字</title>
      <link href="/2018/03/25/%E5%89%91%E6%8C%87Offer-%E9%A2%983-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2018/03/25/%E5%89%91%E6%8C%87Offer-%E9%A2%983-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目：数组中重复的数字"><a href="#题目：数组中重复的数字" class="headerlink" title="题目：数组中重复的数字"></a>题目：数组中重复的数字</h1><h2 id="题目一：找出数组中重复的数字"><a href="#题目一：找出数组中重复的数字" class="headerlink" title="题目一：找出数组中重复的数字"></a>题目一：找出数组中重复的数字</h2><p>在一个长度为n的数组里的所有数字都在0~n-1的范围内。数组中某些数字是重复的。但不知道有几个数字重复了，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p><h2 id="题目二：不修改数组找出数组中重复的数字"><a href="#题目二：不修改数组找出数组中重复的数字" class="headerlink" title="题目二：不修改数组找出数组中重复的数字"></a>题目二：不修改数组找出数组中重复的数字</h2><p>在一个长度为n+1的数组里的所有数字都在1~n的范围内。所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2,3,5,4,3,2,6,7}，那么对应的输出是重复的数字2或者3。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="解析题目一"><a href="#解析题目一" class="headerlink" title="解析题目一"></a>解析题目一</h2><p>数组在空间上连续且含有下标，此题考虑查找效率<br>稍加思索，决定利用下标：若数值与下标不同则与数值对应下标的数值进行置换，若置换中发现两数相同则查找结束，如此时间复杂度仅O(n)，代码如下</p><pre><code class="C++">bool findDuplicate(int arr[], int length, int *duplication){    int temp;    for (int i = 0; i &lt; length; ++i)        if (i != arr[i])            if (arr[i] != arr[arr[i]])            {                temp = arr[arr[i]];                arr[arr[i]] = arr[i];                arr[i] = temp;            }            else            {                *duplication = arr[i];                return true;            }    return false;}</code></pre><p>对照书本发现思路相同，nice !😎<br>原来无意中已利用下标充当Hash Table(哈希表)的思想解决了问题<br>不过本人漏掉重要的<strong>空值检测、边界检测</strong>😭，修复代码</p><pre><code class="C++">bool findDuplicate(int arr[], int length, int *duplication){    if (arr == nullptr || length &lt;= 0)        return false;    for (int i = 0; i &lt; length; ++i)        if (arr[i] &gt;= length || arr[i] &lt; 0)            return false;    int temp;    for (int i = 0; i &lt; length; ++i)        if (i != arr[i])            if (arr[i] != arr[arr[i]])            {                temp = arr[arr[i]];                arr[arr[i]] = arr[i];                arr[i] = temp;            }            else            {                *duplication = arr[i];                return true;            }    return false;}</code></pre><p>原本以为完美无瑕，<strong>测试数组{0,2,0}发现无法找出重复数字</strong>。<br>究其原因<strong>对于替换数值后的数组{0,0,2}未再次判断，导致第二位 <code>0</code> 成为漏网之鱼</strong>，下为书中神级代码</p><pre><code class="C++">bool duplicate(int numbers[], int length, int *duplication){    if (numbers == nullptr || length &lt;= 0)        return false;    for (int i = 0; i &lt; length; ++i)        if (numbers[i] &gt;= length || numbers[i] &lt; 0)            return false;    int temp;    for (int i = 0; i &lt; length; ++i)        // 使用while便无“漏网之0”        while (i != numbers[i])        {            if (numbers[i] != numbers[numbers[i]])            {                temp = numbers[numbers[i]];                numbers[numbers[i]] = numbers[i];                numbers[i] = temp;            }            else            {                *duplication = numbers[i];                return true;            }        }    return false;}</code></pre><h2 id="解析题目二"><a href="#解析题目二" class="headerlink" title="解析题目二"></a>解析题目二</h2><p>禁止修改输入数组？呵！断我财路，emmmm。苦思冥想，仅想到拷贝数组套用题目一方法……</p><pre><code class="C++">bool findDuplicate(int arr[], int length, int *duplication){    if (nullptr == arr || length &lt;= 0)        return false;    for (int i = 0; i &lt; length; ++i)        if (arr[i] &gt;= length || arr[i] &lt; 1)            return false;    int *arrTemp = new int[length - 1];    for (int i = 0; i &lt; length - 1; ++i)        arrTemp[i] = -1;    for (int i = 0; i &lt; length; ++i)    {        if (arrTemp[arr[i] - 1] == arr[i])        {            *duplication = arr[i];            return true;        }        arrTemp[arr[i] - 1] = arr[i];    }    delete arrTemp;    return false;}</code></pre><p>一筹莫展之下，阅读书中解析顿觉豁然开朗！书中指出，<strong>含重复数字范围内数字个数必大于该范围长度</strong>。例如</p><ul><li>对于长度为3的数组{1,2,2}，范围[1,1]内的数字个数为1等于范围长度1，而范围[2,2]内的数字个数为2大于范围长度1，可以确定重复数字位于范围[2,2]中即为2。</li><li>对于长度为5的数组{2,2,3,4,4}，范围[1,2]内的数字个数为2等于范围长度2，而范围[3,4]内的数字个数为3大于范围长度2，可以确定重复数字位于范围[3,4]中。继续分析范围[3,3]内的数字个数为1等于范围长度1，而范围[4,4]内的数字个数为2大于范围长度1，可以确定重复数字位于范围[4,4]中即为4。<strong>(此方法对于多个重复数字仅能找到其中之一)</strong></li></ul><p>以上两例说明只需对计数范围不断二分法，必定能找出重复数字。因此写出书中神级代码</p><pre><code class="C++">int countRange(int numbers[], int length, int start, int end){    if (nullptr == numbers)        return 0;    int count = 0;    for (int i = 0; i &lt; length; ++i)        if (numbers[i] &gt;= start &amp;&amp; numbers[i] &lt;= end)            ++count;    return count;}bool duplicate(int numbers[], int length, int *duplication){    if (nullptr == numbers || length &lt;= 0)        return false;    for (int i = 0; i &lt; length; ++i)        if (numbers[i] &gt;= length || numbers[i] &lt; 1)            return false;    int start = 1;    int end = length - 1;    while (end &gt;= start)    {        int middle = ((end - start) &lt;&lt; 1) + start;        int count = countRange(numbers, length, start, middle);        if (end == start)            if (count &gt; 1)            {                *duplication = start;                return true;            }            else                break;        if (count &gt; (middle - start + 1))            end = middle;        else            start = middle + 1;    }    return false;}</code></pre><p>对于此二分查找法，countRange将被调用O(logn)次，而countRange的时间复杂度为O(n)，故总时间复杂度为O(nlogn)。空间复杂度为O(1)，这是利用时间换空间。</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 数组 </tag>
            
            <tag> 重复 </tag>
            
            <tag> 数字 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题2-实现单例模式</title>
      <link href="/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%982-%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%982-%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="题目：实现单例-Singleton-模式"><a href="#题目：实现单例-Singleton-模式" class="headerlink" title="题目：实现单例(Singleton)模式"></a>题目：实现单例(Singleton)模式</h1><p>设计一个类，我们只能生成该类的一个实例</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目要求明显，设计单例模式：仅生成单个实例<br>如此需要考虑一下几点：</p><ul><li>构造函数需“隐藏”，且另设方法通过静态变量判断是否创建实例充当构造函数</li><li>返回实例的方法必定使用 <code>new</code> 创建实例(否则将产生值传递生成多个单例)，故需存储静态实例指针待销毁时使用</li><li>静态变量用于存储变量创建状态，将其设为 <code>int flag</code> ？此举造成冗余，不如利用静态实例指针</li></ul><p>理清三点后奉上本人渣码</p><pre><code class="C++">class Singleton{public:    ~Singleton();    static Singleton* s_pInstance;    static Singleton* getInstance();private:    Singleton();    // other members......}// C++中仅有静态整形常量才可于类内初始化，否则导致所有实例均含该静态成员Singleton* Singleton::s_pInstance = nullptr;Singleton::Singleton() {}Singleton::~Singleton(){    if (nullptr != Singleton::s_pInstance)    {        delete Singleton::s_pInstance;        Singleton::s_pInstance = nullptr;    }}Singleton* Singleton::getInstance(){    if (nullptr == Singleton::s_pInstance)        Singleton::s_pInstance = new Singleton();    return Singleton::s_pInstance;}</code></pre><p>看似完美，却木有考虑多线程下同时执行 <code>if (nullptr == Singleton::s_pInstance)</code> 情况，加锁加锁……</p><pre><code class="C++">// 使用window API操控锁class LockBase{public:    LockBase()    {        ::InitializeCriticalSection(&amp;cs);    }    ~LockBase()    {        ::DeleteCriticalSection(&amp;cs);    }    void lock()    {        ::EnterCriticalSection(&amp;cs);    }    void unlock()    {        ::LeaveCriticalSection(&amp;cs);    }private:    CRITICAL_SECTION cs;};</code></pre><pre><code class="C++">class Singleton{public:    ~Singleton();    static Singleton* s_pInstance;    static Singleton* getInstance();private:    Singleton();    // other members......};Singleton* Singleton::s_pInstance = nullptr;Singleton::Singleton() {}Singleton::~Singleton(){    if (nullptr != Singleton::s_pInstance)    {        delete Singleton::s_pInstance;        Singleton::s_pInstance = nullptr;    }}Singleton* Singleton::getInstance(){    LockBase lockBase;    lockBase.lock();    if (nullptr == Singleton::s_pInstance)        Singleton::s_pInstance = new Singleton();    lockBase.unlock();    return Singleton::s_pInstance;}</code></pre><p>very nice ! 😀 等等！其实这个锁的范围有点大了，我们可以再次优化，缩小范围</p><pre><code class="C++">Singleton* Singleton::getInstance(){    if (nullptr == Singleton::s_pInstance)    {        LockBase lockBase;        lockBase.lock();        if (nullptr == Singleton::s_pInstance)            Singleton::s_pInstance = new Singleton();        lockBase.unlock();    }    return Singleton::s_pInstance;}</code></pre><p>不但缩小范围，而且提升效率，感觉很棒棒(๑•̀ㅂ•́)و✧ 对照下书本<br>有木有搞错！结果书上说还有更加优秀的解法=_=</p><h2 id="力荐解法一：利用静态构造函数"><a href="#力荐解法一：利用静态构造函数" class="headerlink" title="力荐解法一：利用静态构造函数"></a>力荐解法一：利用静态构造函数</h2><p>静态构造函数：定义类时仅自动执行一次的函数<br>可能要让您失望了，书中使用C#，而C++没有静态构造函数！😂<br>先看看书中C#神级代码</p><pre><code class="CS">public class Singleton{    private static Singleton instance = new Singleton();    public static Singleton getInstance()    {        return instance;    }    // other members......};</code></pre><p>再看看 <code>C++</code> 模拟代码</p><pre><code class="C++">class Singleton{public:    ~Singleton();    static Singleton* s_pInstance;    static Singleton* getInstance();private:    Singleton();    // other members......};Singleton* Singleton::s_pInstance = new Singleton();Singleton* Singleton::getInstance(){    return Singleton::s_pInstance;}</code></pre><p>其实是在全局域中直接设定，略显牵强😝</p><h2 id="力荐解法二：实现按需创建实例"><a href="#力荐解法二：实现按需创建实例" class="headerlink" title="力荐解法二：实现按需创建实例"></a>力荐解法二：实现按需创建实例</h2><p>解法一中过早创建实例占用内存，所以可用高级语言中 <strong>类仅在使用时载入</strong> 的特性改进代码<br>C++无法实现此方法，以下依旧是书中C#神级代码</p><pre><code class="CS">public class Singleton{    public static Singleton getInstance()    {        return Nested.instance;    }    class Nested    {        // internal表示该变量仅可在同项目内调用        internal static Singleton instance = new Singleton();    };    // other members......};</code></pre><h1 id="本题扩展"><a href="#本题扩展" class="headerlink" title="本题扩展"></a>本题扩展</h1><p>实现可继承单例，派生类都只能产生一个实例<br>可以在单例类中使用指针数组判断对应子类标记是否已存在，若存在直接返回，反之创建子类，应加锁实现</p>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 单例 </tag>
            
            <tag> Singleton </tag>
            
            <tag> 模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指Offer-题1-赋值运算符函数</title>
      <link href="/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%981-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0/"/>
      <url>/2018/03/24/%E5%89%91%E6%8C%87Offer-%E9%A2%981-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目：赋值运算符函数"><a href="#题目：赋值运算符函数" class="headerlink" title="题目：赋值运算符函数"></a>题目：赋值运算符函数</h1><p>如下为类型CMyString的声明，请为该类型添加赋值运算符函数。</p><pre><code class="C++">class CMyString{public:    CMyString(char* pData=NULL);    CMyString(const CMyString&amp; str);    ~CMyString(void);private:    char *m_pData;};</code></pre><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目考察赋值运算符(=)函数声明，对于</p><pre><code class="C++">int a;// 调用赋值运算符函数a = 1;</code></pre><p>考虑形如 <code>a = 1</code> ，视 <code>a</code> 为 <code>int</code> 对象则代码改为 <code>a.=(1)</code>，其中 <code>=</code> 为方法名， <code>1</code> 为实参，由此构造出函数声明雏形</p><pre><code class="C++">返回值 =(int num);</code></pre><p>因为 <code>printf(&quot;%d&quot;, a = 1)</code> 输出值为运算结果，故而</p><pre><code class="C++">int =(int num);</code></pre><p>由于运算符函数特殊性，函数名加上关键词operator</p><pre><code class="C++">int operator=(int num);</code></pre><p>考虑函数仅对实参取值，故参数可常类型(const)引用传递，修改声明</p><pre><code class="C++">int operator= (const int&amp; num);</code></pre><p>考虑以下任意一种情况</p><ul><li><code>(a = 1) = 2</code> 运行通过说明 <code>(a = 1)</code> 返回值为可修改的左值即 <code>a</code></li><li><code>cout &lt;&lt; ... &lt;&lt; ...</code> 中的运算符函数 <code>&lt;&lt;</code> 可流式编写，说明 <code>cout &lt;&lt; ...</code> 返回值为可修改左值即<code>std::out&amp;</code></li></ul><p>故返回值需引用传递，修改声明</p><pre><code class="C++">int&amp; operator= (int&amp; num);</code></pre><p>套用进类 <code>CMyString</code></p><pre><code class="C++">class CMyString{public:    CMyString(char* pData=NULL);    CMyString(const CMyString&amp; str);    ~CMyString(void);    CMyString&amp; operator=(const CMyString&amp; str);private:    char *m_pData;};</code></pre><p>顺便把定义写了(应该是”深拷贝”赋值)</p><pre><code class="C++">CMyString&amp; operator=(const CMyString&amp; str){    m_pData = new char[strlen(str.m_pData) + 1];    strcpy(m_pData, str.m_pData);    return *this;}</code></pre><p>对照书本发现自己还是太嫩了，没有对各个变量进行判断，安全代码</p><pre><code class="C++">CMyString&amp; operator=(const CMyString&amp; str){    if(&amp;str == this)        return *this;    delete[] m_pData;    m_pData = nullptr;    m_pData = new char[strlen(str.m_pData) + 1];    strcpy(m_pData, str.m_pData);    return *this;}</code></pre><p>然而，事情并没有这么简单……，书中神级代码</p><pre><code class="C++">CMyString&amp; operator=(const CMyString&amp; str){    if (&amp;str != this)    {        // (代码异常安全性)将new操作置于构造函数中，可保护当前m_pData数据免受delete        CMyString strTemp(str);        char *pTemp = strTemp.m_pData;        strTemp.m_pData = this-&gt;m_pData;        this-&gt;m_pData = pTemp;    }}</code></pre>]]></content>
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> 算法 </tag>
            
            <tag> 赋值 </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机图形学-直线</title>
      <link href="/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B4%E7%BA%BF/"/>
      <url>/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%9B%B4%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h1 id="直线绘制算法"><a href="#直线绘制算法" class="headerlink" title="直线绘制算法"></a>直线绘制算法</h1><p><em>本文介绍内容归属计算机图形学范畴，基于二维平面直角坐标系绘制</em></p><hr><h2 id="为何研究直线绘制算法？"><a href="#为何研究直线绘制算法？" class="headerlink" title="为何研究直线绘制算法？"></a>为何研究直线绘制算法？</h2><p>现实世界绘制直线(段)只靠直尺和笔，而计算机显示图形需点亮屏幕像素点——绘点成线(段)</p><p>如同一连串英文句点绘制而成的分割线，效果如下（<em>离散化的近似表现</em>，假使放大页面会出现明显间隙）</p><p>…………………………………………………………………….</p><p>可惜直线不只是水平线，还包括斜线吖！（QAQ）</p><p>为此，图形学者致力寻找高效绘点算法 (\掌声)。我们将讨论以下三种直线绘制算法：</p><ol><li>DDA算法<ul><li>算法思想<strong>简单</strong></li><li>直线平滑性差，效率较高</li></ul></li><li>逐点比较算法（亦称插补法）<ul><li><strong>工业常用</strong>算法</li><li>直线平滑性好，效率较低</li></ul></li><li>Breseham算法<ul><li><strong>高效</strong></li><li>兼并DDA算法与插补法思想</li></ul></li></ol><h2 id="DDA（DIgital-differential-analyzer）算法"><a href="#DDA（DIgital-differential-analyzer）算法" class="headerlink" title="DDA（DIgital differential analyzer）算法"></a>DDA（DIgital differential analyzer）算法</h2><p>聪明的数学家早将直线用数学公式表示出来 <strong>y = k · x + b</strong></p><p>求解两个未知量 <code>k、b</code> 我们只需y知晓两组点数据即可（两点绘制一条直线），那么我们就用线段的起点和终点代入公式吧。（^_^）</p><p><code>起点p0(0, 0) 终点p6(6, 4) -&gt; k = 1.5，b = 0</code>。观察发现当 <code>x2 = x1 + 1</code> 时，<code>y2 = y1 + k</code></p><p>计算机像素单位长度为1（即像素点数据均为整数），我们凑巧将 y2 取整成 y2’ 即得需点亮像素点位置 <code>(x2, y2&#39;)</code></p><p>依此类推，<code>x3 = x2 + 1，y3 = y2 + k，y3&#39; = 取整y3</code> ……</p><p>大功告成？哦不！我们还能优化一下效率</p><ul><li><p>当直线斜率 <code>k &lt; 1</code> 时，我们以x为主，采用 <code>x2 = x1 + 1</code> 的步进方式，加快水平方向延伸速度</p></li><li><p>当直线斜率 <code>k &gt; 1</code> 时，我们以y为主，采用 <code>y2 = y1 + 1</code> 的步进方式，加快垂直方向延伸速度</p></li></ul><p><strong><em>取整步骤需要对小数四舍五入，对效率略有影响</em></strong></p><p>最终代码如下</p><pre><code class="c">/**    使用openGL的glut库    #include &lt;gl\glut.h&gt;    #include &lt;math.h&gt;    x1 = 0，y1 = 0    x2 = 6，y2 = 4*/void drawLineDDA(GLint x1, GLint y1, GLint x2, GLint y2){    glColor3f(1.0f, 0.0f, 0.0f);    //置颜色为红    int dx = x2 - x1;    int dy = y2 - y1;    dx = abs(dx);    dy = abs(dy);    int step = dx &gt; dy ? dx : dy;    //判断k与1的关系，若dx大，水平方向延伸为主；若dy大，垂直方向延伸为主    double xin = dx / step;    //x轴步长    double yin = dy / (double)step;    //y轴步长    double x = x1;    double y = y1;    glBegin(GL_POINTS);    for (int i = 0; i &lt;= step; i++)    {        glVertex2f(x / 10.0, int(y + 0.5) / 10.0);    //int(y + 0.5)将y值四舍五入，绘于标准化坐标系，故除以10.0        x = x + xin;        y = y + yin;    }    glEnd();}</code></pre><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/DDA.PNG" alt="DDA算法效果图"></p><h2 id="逐点比较算法（插补法）"><a href="#逐点比较算法（插补法）" class="headerlink" title="逐点比较算法（插补法）"></a>逐点比较算法（插补法）</h2><p>此算法以像素点为主，<strong>第一象限</strong>前提下考虑<strong>右方向</strong>和<strong>上方向</strong>像素点与直线位置，二选一点亮</p><p>同样取 <code>起点p0(0, 0) 终点pn(6, 4)</code> 代入公式 <strong>y = k · x + b</strong> 得 <code>k = 1.5，b = 0</code></p><p>当像素点 <code>p</code> 在直线上方时 <code>yp / xp &gt; (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp &gt; 0</code></p><p>当像素点 <code>p</code> 在直线中时 <code>yp / xp = (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp = 0</code></p><p>当像素点 <code>p</code> 在直线下方时 <code>yp / xp &lt; (y6 - y0) / (x6 - x0)</code>，即 <code>yp * (x6 - x0) - (y6 - y0) * xp &lt; 0</code></p><p>把 <code>yp * (x6 - x0) - (y6 - y0) * xp</code> 记为 <code>F</code> 则 <code>F = yp * (x6 - x0) - (y6 - y0) * xp</code> 即为偏差公式，且起点偏差应为 <code>F0 = 0</code></p><ol><li><p>当 <code>F &gt; 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p></li><li><p>当 <code>F = 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）或 <code>y2 = y1 + 1</code>（即点亮上方像素点）</p></li><li><p>当 <code>F &lt; 0</code> 时，<code>y2 = y1 + 1</code>（即点亮上方像素点）</p></li></ol><p>但逐次求解含有乘法的偏差公式严重影响效率<del>有木有啊</del>，简化为下式（当 <code>F = 0</code> 时取 <code>x2 = x1 + 1</code>）</p><ul><li><p>当 <code>F1 &gt;= 0</code> 时 <code>F2 = yp * (x6 - x0) - (y6 - y0) * (xp + 1) = F1 - (y6 - y0)</code></p></li><li><p>当 <code>F1 &lt; 0</code> 时 <code>F2 = (yp + 1) * (x6 - x0) - (y6 - y0) * xp = F1 + (x6 - x0)</code></p></li></ul><p><strong><em>因为可能点亮上方像素点，意味同一y值下不只点亮一点像素，故效率较低</em></strong></p><p>同理可得第二象限、第三象限、第四象限求法，请读者自行计算，不再赘述（偷个懒 \滑稽）</p><p>最终代码如下</p><pre><code class="c">/**使用openGL的glut库#include &lt;gl\glut.h&gt;#include &lt;math.h&gt;*/void drawLineInsert(GLint x1, GLint y1, GLint x2, GLint y2){    glColor3f(1.0f, 0.0f, 0.0f);    //置颜色为红    int dx = x2 - x1;    int dy = y2 - y1;    int f = 0;    double x = x1;    double y = y1;    glBegin(GL_POINTS);    while (x &lt; x2 + 1)    {        glVertex2f(x / 10.0, y / 10.0);    //绘制于标准化坐标系，故除以10.0        if (f &gt;= 0)        {            x = x + 1;            f = f - dy;        }        else        {            y = y + 1;            f = f + dx;        }    }    glEnd();}</code></pre><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/Insert.PNG" alt="插补法效果图"></p><h2 id="Bresenham算法"><a href="#Bresenham算法" class="headerlink" title="Bresenham算法"></a>Bresenham算法</h2><p>此算法基于DDA算法进行逐点比较改进而来，同逐点比较法以像素点为主，考虑<strong>右方向</strong>和<strong>右上方向</strong>像素点与直线位置，二选一点亮</p><p>无耻地盗个图</p><p><img src="https://camo.githubusercontent.com/c5669fe7d006c897cf652afa9a06f9ed9e773553/68747470733a2f2f696d6773612e62616964752e636f6d2f6261696b652f63302533446261696b6538302532433525324335253243383025324332362f7369676e3d36326235313930343938353034666332623635326238353738346234386337342f643031333733663038323032356161666539393465626337663865646162363430333466316131332e6a7067" alt="Bresenham原理图"></p><p>同样取 <code>起点p0(0, 0) 终点p6(6, 4)</code> 代入公式 <strong>y = k · x + b</strong> 得 <code>k = 1.5，b = 0</code></p><p>存在规律 <code>y2 = y1 + k</code>，若 <code>y1</code> 偏上则点亮右上方像素点，若 <code>y2</code> 偏下则点亮右方像素点，即比较交点 <code>y2</code> 与像素间距中点位置</p><p>记 <code>d = (y2 - y1) / (x2 - x1) + (y2 - y1) / (x2 - x1) - └ (y2 - y1) / (x2 - x1) + (y1 - y0) / (x1 - x0) ┘</code> ，（<code>└x┘</code> 表示取下整，如 <code>└1.2┘ = 1</code>；减去取下整值是为保证 <code>d ∈ [0, 1]</code>）则</p><p>当 <code>d &gt; 0.5</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）</p><p>当 <code>d = 0.5</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）或 <code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>当 <code>d &lt; 0.5</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>进一步设 <code>e = d - 0.5</code> 则</p><p>当 <code>e &gt; 0</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）</p><p>当 <code>e = 0</code> 时，<code>x2 = x1 + 1，y2 = y1 + 1</code>（即点亮右上方像素点）或 <code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>当 <code>e &lt; 0</code> 时，<code>x2 = x1 + 1</code>（即点亮右方像素点）</p><p>至此算法演变为判断 <code>e</code> 的正负号，既然如此我们可将算式转为整数加减形式避免除法提高效率</p><p><em>`e = (2d - 1) </em> (x2 - x1) <em> …… </em> (x1 - x0) = 2 <em> (y2 - y1) </em> …… <em> (x1 - x0) + …… + (y1 - y0) </em> …… <em> (x2 - x1) - 2 </em> └ (y2 - y1) / (x2 - x1) + …… + (y1 - y0) / (x1 - x0) ┘ <em> (x2 - x1) </em> …… <em> (x1 - x0)  - 2 </em> └ …… + (y1 - y0) / (x1 - x0) ┘ <em> (x2 - x1) </em> …… <em> (x1 - x0) - (x2 - x1) </em> …… <em> (x1 - x0)`</em></p><p>好家伙，劳资还是坚持打粗来了（= =）</p><p>看似有规律，采取数学归纳法</p><p>记 <code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - 2 * └ (y1 - y0) / (x1 - x0) ┘ * (x1 - x0) - (x1 - x0)</code></p><p>记 <code>e2 = (2d2 - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - 2 * └ (y2 - y1) / (x2 - x1) + (y1 - y0) / (x1 - x0) ┘ * (x2 - x1) * (x1 - x0) - 2 * └ (y1 - y0) / (x1 - x0) ┘ * (x2 - x1) * (x1 - x0) - (x2 - x1) * (x1 - x0)</code></p><p>取下整采用分情况讨论（当 <code>d = 0.5</code> 时，<code>x2 = x1 + 1</code>）</p><p>当 <code>d2 &lt; 1</code> 时</p><p><code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - (x1 - x0)</code></p><p><code>e2 = (2d2 - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - (x2 - x1) * (x1 - x0)</code></p><p>即</p><p><code>e2 = e1 * (x2 - x1) + 2 * (y2 - y1) * (x1 - x0)</code></p><p>当 <code>d2 &gt; 1</code> 或 <code>d2 = 1</code> 时</p><p><code>e1 = (2d1 - 1) * (x1 - x0) = 2 * (y1 - y0) - (x1 - x0)</code></p><p><code>e2 = (2(d2 - 1) - 1) * (x2 - x1) * (x1 - x0) = 2 * (y2 - y1) * (x1 - x0) + 2 * (y1 - y0) * (x2 - x1) - (x2 - x1) * (x1 - x0) - 2 * (x2 - x1) * (x1 - x0)</code></p><p>即</p><p><code>e2 = e1 * (x2 - x1) + 2 * (y2 - y1) * (x1 - x0) - 2 * (x2 - x1) * (x1 - x0)</code></p><p>大可利用编程语言 <code>d = d + k</code> 特性，且 <code>dx = (x2 - x1) = 1，dy = (y2 - y1) = k</code> 为固定值</p><p>当 <code>d &lt; 1</code> 即 <code>d - 0.5 &lt; 1 - 0.5 -&gt; 2 * (d - 0.5) &lt; 1</code> -&gt; <code>2 * (d - 0.5) * dx &lt; dx</code> -&gt; <code>e &lt; dx</code> 时</p><p><code>e = e * dx + 2 * dy * dx</code></p><p>当 <code>d &gt; 1</code> 或 <code>d = 1</code> 同理即 <code>e &gt; dx</code> 或 <code>e = dx</code> 时</p><p><code>e = e * dx + 2 * dy * dx - 2 * dx * dx</code></p><p><strong><code>e</code> 初始值为 <code>e0 = 2 * (0 - 0.5) * (x1 - x0) = -(x1 - x0) = -dx</code></strong></p><p><strong>当 <code>e &gt; dx</code> 时，<code>e = e + 2 * dy * dx - 2 * dx * dx</code>（即点亮右上方像素点）</strong></p><p><strong>当 <code>e = dx</code> 时，<code>e = e + 2 * dy * dx - 2 * dx * dx</code>（即点亮右上方像素点）</strong></p><p><strong>当 <code>e &lt; dx</code> 时，<code>e = e - 2 * dx * dx</code>（即点亮右方像素点）</strong></p><p><strong><em>同一y值下仅点亮一点像素，且计算过程均为加减法 (上式乘数固定值)，适用各象限无需分类，高效快捷</em></strong></p><p>最终代码如下</p><pre><code class="c">/**使用openGL的glut库#include &lt;gl\glut.h&gt;#include &lt;math.h&gt;*/void drawLineBresenham(GLint x1, GLint y1, GLint x2, GLint y2){    glColor3f(1.0f, 0.0f, 0.0f);    //置颜色为红    int dx = 1;    double dy = (y2 - y1) / (double)(x2 - x1);    double e = -dx;    double x = x1;    double y = y1;    glBegin(GL_POINTS);    while (x &lt; x2 + 1)    {        glVertex2f(x / 10.0, y / 10.0);    //绘制于标准化坐标系，故除以10.0        x++;        e = e + 2 * dy * dx;    //可换为单一变量无需多次做乘法        if (e &gt;= 0)        {            y++;            e = e - 2 * dx * dx;        }    }    glEnd();}</code></pre><p>绘制结果如图（补上黑色网格，蓝线为预期效果，绿点为可点亮像素点，白色部分代表像素空隙（放大效果））</p><p><img src="https://raw.githubusercontent.com/cz111000/DrawLine/master/Bresenham.PNG" alt="Bresenham算法效果图"></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><em><a href="http://baike.baidu.com/item/DDA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">DDA算法_百度百科</a></em></p><p><em><a href="https://wenku.baidu.com/view/7df948146c175f0e7cd1377f.html" target="_blank" rel="noopener">逐点比较法直线插补</a></em></p><p><em><a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm" target="_blank" rel="noopener">Bresenham’s line algorithm - Wikipedia</a></em></p><p><em><a href="http://www.360doc.com/content/13/1220/09/11400509_338596444.shtml" target="_blank" rel="noopener">Bresenham直线算法与画圆算法</a></em></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 直线 </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法总结(上)</title>
      <link href="/2018/03/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93(%E4%B8%8A)/"/>
      <url>/2018/03/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93(%E4%B8%8A)/</url>
      <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><hr><h2 id="What’s-Algorithm"><a href="#What’s-Algorithm" class="headerlink" title="What’s Algorithm ?"></a>What’s Algorithm ?</h2><p>提及“<strong>算法</strong>”，小白面对高大上说词仰慕之心油然而生 @o@</p><p>然而，算法并不神秘 = =</p><p>顾名思义，<strong>计算方法</strong>简称算法（什，什，什，什么！这么简单？→_→）</p><p>举个栗子：</p><blockquote><p>从小学就接触的乘法：对 n+n+n+…+n 的简写就是一种算法（递推法<a href="递推法即是把一个复杂的庞大的计算过程转化为简单过程的多次重复">^A</a>）,<br>算法注定要有输入与输出：算式中的 n 即为输入，乘积即为输出。</p></blockquote><p>注：</p><ul><li>算法中的状态变化是不确定的</li><li>算法必定能在执行有限个步骤之后终止</li><li>某些算法加入随机输入，称为随机化算法</li></ul><h2 id="How-to-Assess-Algorithm"><a href="#How-to-Assess-Algorithm" class="headerlink" title="How to Assess Algorithm ?"></a>How to Assess Algorithm ?</h2><p>对算法的评定分析主要从<strong>时间复杂度</strong>(所耗时间长短)与<strong>空间复杂度</strong>(空间开支大小)来考虑。</p><p>关于复杂度的计算需要引入如下渐近记号：</p><blockquote><p><em>大O记号：</em></p><blockquote><p><em>O(g(n)) = { f(n) : 存在正常数c和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= f(n) &lt;= cg(n) }</em></p></blockquote></blockquote><blockquote><p><em>大Ω记号：</em></p><blockquote><p><em>Ω(g(n)) = { f(n) : 存在正常数c和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= cg(n) &lt;= f(n) }</em></p></blockquote></blockquote><blockquote><p><em>大Θ记号：</em></p><blockquote><p><em>Θ(g(n)) = { f(n) : 存在正常数c1和c2和n0 ，使对所有的n &gt;= n0，都有 0 &lt;= c1g(n) &lt;= f(n) &lt;= c2g(n) }</em></p></blockquote></blockquote><p><em>数学证明资料：<a href="http://www.cnblogs.com/zabery/archive/2011/07/19/2110994.html" target="_blank" rel="noopener">计算机算法分析之渐进记号</a></em></p><p>具体计算方式将于实例中给出 ～(~▽~)～</p><h2 id="DIY-Algorithm-！"><a href="#DIY-Algorithm-！" class="headerlink" title="DIY Algorithm ！"></a>DIY Algorithm ！</h2><p>以下给出排序算法C++代码：</p><p>1.冒泡排序（Bubble Sort）<a href="冒泡排序的思想是让最大的数浮动到数组最后的位置，其次大的数浮动到数组倒数第二个位置，依次推类">^B</a></p><pre><code class="C++">template&lt;typename T&gt;void bubbleSort(T arr[],int n){    T temp;    for(int i = 0;i &lt; n - 1;i++)        for(int j = 0;j &lt; n - 1 - i;j++)            if(arr[j] &gt; arr[j + 1])            {                temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            }}</code></pre><p>时间复杂度分析：</p><p>考虑最坏情况–将逆序数列变为顺序（此情况下，每一次比较都需要进行交换运算） T_T</p><blockquote><p>再举个栗子：<strong>数列 5 4 3 2 1 进行冒泡升序排列</strong><br>第一次外层循环从第一个数5开始到倒数第二个数2结束，<br>共进行4次比较交换运算，5移到末尾。<br>第二次外层循环从第一个数4开始到倒数第三个数2结束。<br>共进行3次比较交换运算，4移到倒数第二个数。<br>……<br>依次推类，总比较次数为 4 + 3 + 2 + 1 = 10 次</p></blockquote><p>证明：</p><p>根据数学归纳法,对于n位的数列则有比较次数为<code>(n-1) + (n-2) + ... + 1 = n \* (n - 1) / 2 = (n^2 - n) / 2</code></p><p>如图<img src="http://images.51cto.com/files/uploadimg/20110826/211021569.jpg" alt="比较次数"></p><p>若n = 10000，则<code>(n^2 - n) / 2 = (100000000 - 10000) / 2</code></p><p>相对 100000000 来说 10000 微乎其微，故总计算次数约为<code>0.5 \* N^2</code></p><p>用O(N^2)就表示了其数量级（忽略前面系数0.5）</p><p>得 <strong>冒泡排序的时间复杂度为O(N^2)</strong></p><pre><code class="C++">//冒泡排序改进版：若遍历中得知数组有序则结束排序template&lt;typename T&gt;void bubbleSort(T arr[],int n){    bool flag = false;    T temp;    for(int i = 0;i &lt; n - 1;i++)    {        flag = false;        for(int j = 0;j &lt; n - 1 - i;j++)            if(arr[j] &gt; arr[j + 1])            {                flag = true;                temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            }        if(flag == false)            break;    }}</code></pre><p>改进算法后，对于一个有序数组完成一次外层循环后就会结束，共发生 N - 1 次比较，故升级版冒泡排序在最优情况下的时间复杂度为O(N)</p><p>2.插入排序(Insert Sort)</p><pre><code class="C++">template&lt;typename T&gt;void insertSort(T arr[],int n){    T temp;    for(int i = 1;i &lt; n;i++)        if(arr[i] &lt; arr[i - 1])        {            temp = arr[i];            for(int j = i - 1;j &gt;= 0 &amp;&amp; arr[j] &gt; temp;j--)                arr[j + 1] = arr[j];            arr[j + 1] = temp;        }}</code></pre><p><em>资料：<a href="http://baidu.ku6.com/watch/05586300336858352205.html" target="_blank" rel="noopener">插入排序舞蹈</a></em></p><p>3.*归并排序（Merge Sort）</p><pre><code class="C++">template&lt;typename T&gt;void mergeSort(T arr[],T temp[],int start,int last){    if(start &lt; last)    {        int mid = (start + last) / 2;        mergeSort(arr,temp,start,mid);        mergeSort(arr,temp,mid + 1,last);        arrUnion(arr,temp,start,mid,last);    }    }template&lt;typename T&gt;void arrUnion(T arr[],T temp[],int start,int mid,int last){    int i,j,k;    i = start;    j = mid + 1;    k = start;    while(i != mid + 1 &amp;&amp; j != last + 1)    {        if(arr[i] &lt; arr[j])            temp[k++] = arr[i++];        else            temp[k++] = arr[j++];    }    while(i != mid + 1)        temp[k++] = arr[i++];    while(j != last + 1)        temp[k++] = arr[j++];    for(i = start;i &lt; last + 1;i++)        arr[i] = temp[i];}</code></pre><p><em>资料：<a href="http://visualgo.net/sorting" target="_blank" rel="noopener">排序动画演示</a></em></p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison ."></a>Comparison .</h2><p>下面我们通过这段C语言代码比较排序速度，直观感受时间复杂度。</p><pre><code class="C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;#define N 5000template&lt;typename T&gt;void printArr(T arr[],int n);template&lt;typename T&gt;void quickSort(T arr[],int start,int last);template&lt;typename T&gt;void quickSortRand(T arr[],int start,int last);template&lt;typename T&gt;void mergeSort(T arr[],T temp[],int start,int last);template&lt;typename T&gt;void insertSort(T arr[],int n);template&lt;typename T&gt;void bubbleSort(T arr[],int n);template&lt;typename T&gt;void bubbleSortPlus(T arr[],int n);template&lt;typename T&gt;void choseSort(T arr[],int n);int main(int argc, char * argv[]){    clock_t start, end;    int a[N], b[N], c[N], d[N], e[N], f[N], g[N];    srand(time(NULL));    for(int i = 0;i &lt; N;i++)    {        g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = rand()%100 + rand()%1000;        //g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = N - i;    }    start = clock();    quickSortRand(a,0,N - 1);    end = clock();    printf(&quot;随机快速排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(a,N);    start = clock();    quickSort(b,0,N - 1);    end = clock();    printf(&quot;快速排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(b,N);    int* temp = (int*)malloc(sizeof(int) * N);    start = clock();    mergeSort(c,temp,0,N - 1);    end = clock();    printf(&quot;归并排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(c,N);    free(temp);    start = clock();    insertSort(d,N);    end = clock();    printf(&quot;插入排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(d,N);    start = clock();    bubbleSort(e,N);    end = clock();    printf(&quot;冒泡排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(e,N);    start = clock();    bubbleSortPlus(f,N);    end = clock();    printf(&quot;升级版冒泡排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(f,N);    start = clock();    choseSort(g,N);    end = clock();    printf(&quot;选择排序用时%lfsec\n&quot;,(double)(end - start) / CLOCKS_PER_SEC);    //printArr(g,N);    return 0;}template&lt;typename T&gt;void quickSort(T arr[],int start,int last){    if(start &lt; last)    {        T temp;        int i = start;        int j = last;        while(i != j)        {            while(arr[j] &gt;= arr[start] &amp;&amp; j != i)                j--;            while(arr[i] &lt;= arr[start] &amp;&amp; i != j)                i++;            if(i != j)            {                temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;            }        }        temp = arr[i];        arr[i] = arr[start];        arr[start] = temp;        quickSort(arr, start, i - 1);        quickSort(arr, i + 1, last);    }}template&lt;typename T&gt;void quickSortRand(T arr[],int start,int last){    if(start &lt; last)    {        T temp;        int i = start;        int j = last;        int pos = rand() % (last - start) + start;        temp = arr[start];        arr[start] = arr[pos];        arr[pos] = temp;        while(i != j)        {            while(arr[j] &gt;= arr[start] &amp;&amp; j != i)                j--;            while(arr[i] &lt;= arr[start] &amp;&amp; i != j)                i++;            if(i != j)            {                temp = arr[i];                arr[i] = arr[j];                arr[j] = temp;            }        }        temp = arr[i];        arr[i] = arr[start];        arr[start] = temp;        quickSortRand(arr, start, i - 1);        quickSortRand(arr, i + 1, last);    }}template&lt;typename T&gt;void mergeSort(T arr[],T temp[],int start,int last){    if(start &lt; last)    {        int mid = (start + last) / 2;        mergeSort(arr,temp,start,mid);        mergeSort(arr,temp,mid + 1,last);        int i,j,k;        i = start;        j = mid + 1;        k = start;        while(i != mid + 1 &amp;&amp; j != last + 1)        {            if(arr[i] &lt; arr[j])                temp[k++] = arr[i++];            else                temp[k++] = arr[j++];        }        while(i != mid + 1)            temp[k++] = arr[i++];        while(j != last + 1)            temp[k++] = arr[j++];        for(i = start;i &lt; last + 1;i++)            arr[i] = temp[i];    }   }template&lt;typename T&gt;void insertSort(T arr[],int n){    T temp;    for(int i = 1;i &lt; n;i++)        if(arr[i] &lt; arr[i - 1])        {            temp = arr[i];            for(int j = i - 1;j &gt;= 0 &amp;&amp; arr[j] &gt; temp;j--)                arr[j + 1] = arr[j];            arr[j + 1] = temp;        }}template&lt;typename T&gt;void bubbleSort(T arr[],int n){    T temp;    for(int i = 0;i &lt; n - 1;i++)        for(int j = 0;j &lt; n - 1 - i;j++)            if(arr[j] &gt; arr[j + 1])            {                temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            }}template&lt;typename T&gt;void bubbleSortPlus(T arr[],int n){    bool flag = true;    T temp;    for(int i = 0;i &lt; n - 1 &amp;&amp; flag;i++)    {        flag = false;        for(int j = 0;j &lt; n - 1 - i;j++)            if(arr[j] &gt; arr[j + 1])            {                flag = true;                temp = arr[j];                arr[j] = arr[j + 1];                arr[j + 1] = temp;            }    }}template&lt;typename T&gt;void choseSort(T arr[],int n){    T temp;    for(int i = 0;i &lt; n - 1;i++)        for(int j = i + 1;j &lt; n;j++)            if(arr[i] &gt; arr[j])            {                temp = arr[j];                arr[j] = arr[i];                arr[i] = temp;            }}template&lt;typename T&gt;void printArr(T arr[],int n){    for(int i = 0;i &lt; n;i++)        printf(&quot;%d &quot;, arr[i]);    printf(&quot;\n&quot;);}</code></pre><p>执行条件：</p><p><strong>编译程序VC 6.0</strong></p><p><strong>数组成员 5000</strong></p><p>执行结果：</p><p><strong>随机快速排序用时0.001000sec</strong></p><p><strong>快速排序用时0.001000sec</strong></p><p><strong>归并排序用时0.002000sec</strong></p><p><strong>插入排序用时0.033000sec</strong></p><p><strong>冒泡排序用时0.090000sec</strong></p><p><strong>升级版冒泡排序用时0.089000sec</strong></p><p><strong>选择排序用时0.083000sec</strong></p><p>下面我们通过这段JAVA语言代码比较排序速度，直观感受时间复杂度。</p><pre><code class="JAVA">//Test.javapackage pers.cz.sortcompare;import java.util.Random;import pers.cz.sortcompare.Sort;public class Test {    public static void main(String[] args) {        final int n = 1000;        int[] a = new int[n];        int[] b = new int[n];        int[] c = new int[n];        int[] d = new int[n];        int[] e = new int[n];        int[] f = new int[n];        int[] g = new int[n];        long start, end;        Random rand = new Random();        for (int i = 0; i &lt; a.length; i++) {            g[i] = f[i] = e[i] = d[i] = c[i] = b[i] = a[i] = rand.nextInt();        }        start = System.currentTimeMillis();        Sort.QuickSort(a, 0, n - 1);        end = System.currentTimeMillis();        System.out.print(&quot;QuickSort cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(a);        start = System.currentTimeMillis();        Sort.QuickSortRand(b, 0, n - 1);        end = System.currentTimeMillis();        System.out.print(&quot;QuickSortRand cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(b);        start = System.currentTimeMillis();        int[] temp = new int[n];        Sort.MargeSort(c, 0, n - 1, temp);        temp = null;        end = System.currentTimeMillis();        System.out.print(&quot;MargeSort cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(c);        start = System.currentTimeMillis();        Sort.InsertSort(d);        end = System.currentTimeMillis();        System.out.print(&quot;InstertSort cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(d);        start = System.currentTimeMillis();        Sort.BubbleSortPlus(e);        end = System.currentTimeMillis();        System.out.print(&quot;BubbleSortPlus cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(e);        start = System.currentTimeMillis();        Sort.BubbleSort(f);        end = System.currentTimeMillis();        System.out.print(&quot;BubbleSort cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(f);        start = System.currentTimeMillis();        Sort.ChoseSort(g);        end = System.currentTimeMillis();        System.out.print(&quot;ChoseSort cost time(sec):&quot;);        System.out.println(end - start);        //PrintArrData(g);    }    static void PrintArrData(int[] arr) {        for (int value : arr) {            System.out.println(value);        }        System.out.println();    }}</code></pre><pre><code class="JAVA">//Sort.javapackage pers.cz.sortcompare;import java.util.Random;public class Sort {    public static void ChoseSort(int[] arr) {        int temp;        for (int i = 0; i &lt; arr.length - 1; i++) {            for (int j = i + 1; j &lt; arr.length; j++) {                if (arr[i] &gt; arr[j]) {                    temp = arr[i];                    arr[i] = arr[j];                    arr[j] = temp;                }            }        }    }    public static void BubbleSort(int[] arr) {        int temp;        for (int i = 0; i &lt; arr.length - 1; i++) {            for (int j = 0; j &lt; arr.length - 1 - i; j++) {                if (arr[j] &gt; arr[j + 1]) {                    temp = arr[j];                    arr[j] = arr[j + 1];                    arr[j + 1] = temp;                }            }        }    }    public static void BubbleSortPlus(int[] arr) {        int temp;        boolean flag = true;        for (int i = 0; i &lt; arr.length - 1 &amp;&amp; flag; i++) {            flag = false;            for (int j = 0; j &lt; arr.length - 1 - i; j++) {                if (arr[j] &gt; arr[j + 1]) {                    flag = true;                    temp = arr[j];                    arr[j] = arr[j + 1];                    arr[j + 1] = temp;                }            }        }    }    public static void InsertSort(int[] arr) {        int j, number;        for (int i = 1; i &lt; arr.length; i++) {            if (arr[i] &lt; arr[i - 1]) {                number = arr[i];                for (j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; number; j--) {                    arr[j + 1] = arr[j];                }                arr[j + 1] = number;            }        }    }    public static void MargeSort(int[] arr, int start, int last, int[] temp) {        if (start &lt; last) {            int mid = (start + last) / 2;            Sort.MargeSort(arr, start, mid, temp);            Sort.MargeSort(arr, mid + 1, last, temp);            int i, j, k;            i = start;            j = mid + 1;            k = start;            while (i != mid + 1 &amp;&amp; j != last + 1) {                if (arr[i] &lt; arr[j]) {                    temp[k++] = arr[i++];                } else {                    temp[k++] = arr[j++];                }            }            while (i != mid + 1) {                temp[k++] = arr[i++];            }            while (j != last + 1) {                temp[k++] = arr[j++];            }            for (i = start; i &lt; last + 1; i++) {                arr[i] = temp[i];            }        }    }    public static void QuickSort(int[] arr, int start, int last) {        if (start &lt; last) {            int temp;            int i = start;            int j = last;            while (i != j) {                while (arr[j] &gt;= arr[start] &amp;&amp; j != i) {                    j--;                }                while (arr[i] &lt;= arr[start] &amp;&amp; i != j) {                    i++;                }                if (i != j) {                    temp = arr[i];                    arr[i] = arr[j];                    arr[j] = temp;                }            }            temp = arr[start];            arr[start] = arr[i];            arr[i] = temp;        }    }    public static void QuickSortRand(int[] arr, int start, int last) {        if (start &lt; last) {            int temp;            int i = start;            int j = last;            Random rand = new Random();            int pos = rand.nextInt(last - start) + start;            temp = arr[start];            arr[start] = arr[pos];            arr[pos] = temp;            while (i != j) {                while (arr[j] &gt;= arr[start] &amp;&amp; j != i) {                    j--;                }                while (arr[i] &lt;= arr[start] &amp;&amp; i != j) {                    i++;                }                if (i != j) {                    temp = arr[i];                    arr[i] = arr[j];                    arr[j] = temp;                }            }            temp = arr[start];            arr[start] = arr[i];            arr[i] = temp;        }    }}</code></pre><p>执行条件：</p><p><strong>编译程序NetBeans IDE 8.1</strong></p><p><strong>数组成员 1000</strong></p><p>执行结果：</p><p><strong>QuickSort cost time(sec):1</strong></p><p><strong>QuickSortRand cost time(sec):0</strong></p><p><strong>MargeSort cost time(sec):1</strong></p><p><strong>InstertSort cost time(sec):5</strong></p><p><strong>BubbleSortPlus cost time(sec):14</strong></p><p><strong>BubbleSort cost time(sec):18</strong></p><p><strong>ChoseSort cost time(sec):9</strong></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 冒泡 </tag>
            
            <tag> 插入 </tag>
            
            <tag> 归并 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Test</title>
      <link href="/2018/03/22/Test/"/>
      <url>/2018/03/22/Test/</url>
      <content type="html"><![CDATA[<p>这是一个测试帖</p>]]></content>
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> first </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鄙人不才，小博供阅</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>QQ：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=2506649223&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener">2506649223</a></li><li>Email：<a href="mailto:cz335360@gmail.com" target="_blank" rel="noopener">cz335360@gmail.com</a></li></ul>]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
